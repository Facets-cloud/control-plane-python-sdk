# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiCommonClusterControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_cluster_schedules_using_post(self, cluster_id, request, **kwargs):  # noqa: E501
        """addClusterSchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cluster_schedules_using_post(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ScheduleRequest request: request (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cluster_schedules_using_post_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cluster_schedules_using_post_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
            return data

    def add_cluster_schedules_using_post_with_http_info(self, cluster_id, request, **kwargs):  # noqa: E501
        """addClusterSchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cluster_schedules_using_post_with_http_info(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ScheduleRequest request: request (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cluster_schedules_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `add_cluster_schedules_using_post`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `add_cluster_schedules_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/schedule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterSchedule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tools_config_using_post(self, cluster_id, tools_config, **kwargs):  # noqa: E501
        """addToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tools_config_using_post(cluster_id, tools_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ToolsConfig tools_config: toolsConfig (required)
        :return: ToolsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tools_config_using_post_with_http_info(cluster_id, tools_config, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tools_config_using_post_with_http_info(cluster_id, tools_config, **kwargs)  # noqa: E501
            return data

    def add_tools_config_using_post_with_http_info(self, cluster_id, tools_config, **kwargs):  # noqa: E501
        """addToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tools_config_using_post_with_http_info(cluster_id, tools_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ToolsConfig tools_config: toolsConfig (required)
        :return: ToolsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'tools_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tools_config_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `add_tools_config_using_post`")  # noqa: E501
        # verify the required parameter 'tools_config' is set
        if self.api_client.client_side_validation and ('tools_config' not in params or
                                                       params['tools_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tools_config` when calling `add_tools_config_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tools_config' in params:
            body_params = params['tools_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tools-config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_image_using_post(self, cluster_id, request, **kwargs):  # noqa: E501
        """attachImage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_image_using_post(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ImageOverrideRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_image_using_post_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_image_using_post_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
            return data

    def attach_image_using_post_with_http_info(self, cluster_id, request, **kwargs):  # noqa: E501
        """attachImage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_image_using_post_with_http_info(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ImageOverrideRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_image_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `attach_image_using_post`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `attach_image_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/attach-image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_enable_disable_resources_using_put(self, cluster_id, resource_enable_disable_request_list, **kwargs):  # noqa: E501
        """bulkEnableDisableResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_enable_disable_resources_using_put(cluster_id, resource_enable_disable_request_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param list[ResourceEnableDisableRequest] resource_enable_disable_request_list: resourceEnableDisableRequestList (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_enable_disable_resources_using_put_with_http_info(cluster_id, resource_enable_disable_request_list, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_enable_disable_resources_using_put_with_http_info(cluster_id, resource_enable_disable_request_list, **kwargs)  # noqa: E501
            return data

    def bulk_enable_disable_resources_using_put_with_http_info(self, cluster_id, resource_enable_disable_request_list, **kwargs):  # noqa: E501
        """bulkEnableDisableResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_enable_disable_resources_using_put_with_http_info(cluster_id, resource_enable_disable_request_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param list[ResourceEnableDisableRequest] resource_enable_disable_request_list: resourceEnableDisableRequestList (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_enable_disable_request_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_enable_disable_resources_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `bulk_enable_disable_resources_using_put`")  # noqa: E501
        # verify the required parameter 'resource_enable_disable_request_list' is set
        if self.api_client.client_side_validation and ('resource_enable_disable_request_list' not in params or
                                                       params['resource_enable_disable_request_list'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_enable_disable_request_list` when calling `bulk_enable_disable_resources_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource_enable_disable_request_list' in params:
            body_params = params['resource_enable_disable_request_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/resource-enable-disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_configurations_selective_using_put(self, cluster_id, copy_configurations_request, **kwargs):  # noqa: E501
        """copyConfigurationsSelective  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_configurations_selective_using_put(cluster_id, copy_configurations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param CopyConfigurationsRequest copy_configurations_request: copyConfigurationsRequest (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_configurations_selective_using_put_with_http_info(cluster_id, copy_configurations_request, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_configurations_selective_using_put_with_http_info(cluster_id, copy_configurations_request, **kwargs)  # noqa: E501
            return data

    def copy_configurations_selective_using_put_with_http_info(self, cluster_id, copy_configurations_request, **kwargs):  # noqa: E501
        """copyConfigurationsSelective  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_configurations_selective_using_put_with_http_info(cluster_id, copy_configurations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param CopyConfigurationsRequest copy_configurations_request: copyConfigurationsRequest (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'copy_configurations_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_configurations_selective_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `copy_configurations_selective_using_put`")  # noqa: E501
        # verify the required parameter 'copy_configurations_request' is set
        if self.api_client.client_side_validation and ('copy_configurations_request' not in params or
                                                       params['copy_configurations_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `copy_configurations_request` when calling `copy_configurations_selective_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'copy_configurations_request' in params:
            body_params = params['copy_configurations_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/copy-configurations-selective', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_configurations_using_put(self, cluster_id, copy_configurations_request, **kwargs):  # noqa: E501
        """This method is used to copy configurations from one cluster to another cluster.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_configurations_using_put(cluster_id, copy_configurations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param CopyConfigurationsRequest copy_configurations_request: copyConfigurationsRequest (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_configurations_using_put_with_http_info(cluster_id, copy_configurations_request, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_configurations_using_put_with_http_info(cluster_id, copy_configurations_request, **kwargs)  # noqa: E501
            return data

    def copy_configurations_using_put_with_http_info(self, cluster_id, copy_configurations_request, **kwargs):  # noqa: E501
        """This method is used to copy configurations from one cluster to another cluster.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_configurations_using_put_with_http_info(cluster_id, copy_configurations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param CopyConfigurationsRequest copy_configurations_request: copyConfigurationsRequest (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'copy_configurations_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_configurations_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `copy_configurations_using_put`")  # noqa: E501
        # verify the required parameter 'copy_configurations_request' is set
        if self.api_client.client_side_validation and ('copy_configurations_request' not in params or
                                                       params['copy_configurations_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `copy_configurations_request` when calling `copy_configurations_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'copy_configurations_request' in params:
            body_params = params['copy_configurations_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/copy-configurations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_availability_schedule_using_post(self, cluster_id, schedules, **kwargs):  # noqa: E501
        """createAvailabilitySchedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_availability_schedule_using_post(cluster_id, schedules, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param list[ScheduleRequest] schedules: schedules (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_availability_schedule_using_post_with_http_info(cluster_id, schedules, **kwargs)  # noqa: E501
        else:
            (data) = self.create_availability_schedule_using_post_with_http_info(cluster_id, schedules, **kwargs)  # noqa: E501
            return data

    def create_availability_schedule_using_post_with_http_info(self, cluster_id, schedules, **kwargs):  # noqa: E501
        """createAvailabilitySchedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_availability_schedule_using_post_with_http_info(cluster_id, schedules, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param list[ScheduleRequest] schedules: schedules (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'schedules']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_availability_schedule_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `create_availability_schedule_using_post`")  # noqa: E501
        # verify the required parameter 'schedules' is set
        if self.api_client.client_side_validation and ('schedules' not in params or
                                                       params['schedules'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `schedules` when calling `create_availability_schedule_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schedules' in params:
            body_params = params['schedules']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/availability-schedule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cluster_tf_details_using_post(self, cluster_id, tf_run_configurations, **kwargs):  # noqa: E501
        """createClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_tf_details_using_post(cluster_id, tf_run_configurations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param TFRunConfigurations tf_run_configurations: tfRunConfigurations (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cluster_tf_details_using_post_with_http_info(cluster_id, tf_run_configurations, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cluster_tf_details_using_post_with_http_info(cluster_id, tf_run_configurations, **kwargs)  # noqa: E501
            return data

    def create_cluster_tf_details_using_post_with_http_info(self, cluster_id, tf_run_configurations, **kwargs):  # noqa: E501
        """createClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_tf_details_using_post_with_http_info(cluster_id, tf_run_configurations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param TFRunConfigurations tf_run_configurations: tfRunConfigurations (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'tf_run_configurations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster_tf_details_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `create_cluster_tf_details_using_post`")  # noqa: E501
        # verify the required parameter 'tf_run_configurations' is set
        if self.api_client.client_side_validation and ('tf_run_configurations' not in params or
                                                       params['tf_run_configurations'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tf_run_configurations` when calling `create_cluster_tf_details_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tf_run_configurations' in params:
            body_params = params['tf_run_configurations']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFRunConfigurations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_draft_cluster_using_post(self, cluster_request, **kwargs):  # noqa: E501
        """createDraftCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_draft_cluster_using_post(cluster_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftClusterRequest cluster_request: clusterRequest (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_draft_cluster_using_post_with_http_info(cluster_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_draft_cluster_using_post_with_http_info(cluster_request, **kwargs)  # noqa: E501
            return data

    def create_draft_cluster_using_post_with_http_info(self, cluster_request, **kwargs):  # noqa: E501
        """createDraftCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_draft_cluster_using_post_with_http_info(cluster_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftClusterRequest cluster_request: clusterRequest (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_draft_cluster_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_request' is set
        if self.api_client.client_side_validation and ('cluster_request' not in params or
                                                       params['cluster_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_request` when calling `create_draft_cluster_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster_request' in params:
            body_params = params['cluster_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/draft-cluster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_snapshot_using_post(self, cluster_id, instance_name, resource_type, **kwargs):  # noqa: E501
        """createSnapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snapshot_using_post(cluster_id, instance_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_snapshot_using_post_with_http_info(cluster_id, instance_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_snapshot_using_post_with_http_info(cluster_id, instance_name, resource_type, **kwargs)  # noqa: E501
            return data

    def create_snapshot_using_post_with_http_info(self, cluster_id, instance_name, resource_type, **kwargs):  # noqa: E501
        """createSnapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snapshot_using_post_with_http_info(cluster_id, instance_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'instance_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `create_snapshot_using_post`")  # noqa: E501
        # verify the required parameter 'instance_name' is set
        if self.api_client.client_side_validation and ('instance_name' not in params or
                                                       params['instance_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instance_name` when calling `create_snapshot_using_post`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `create_snapshot_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'instance_name' in params:
            path_params['instanceName'] = params['instance_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_inputs_using_post(self, cluster_id, input_type, template_inputs, **kwargs):  # noqa: E501
        """createTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_inputs_using_post(cluster_id, input_type, template_inputs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param list[StackTemplateInput] template_inputs: templateInputs (required)
        :return: dict(str, list[StackTemplateInput])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_inputs_using_post_with_http_info(cluster_id, input_type, template_inputs, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_inputs_using_post_with_http_info(cluster_id, input_type, template_inputs, **kwargs)  # noqa: E501
            return data

    def create_template_inputs_using_post_with_http_info(self, cluster_id, input_type, template_inputs, **kwargs):  # noqa: E501
        """createTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_inputs_using_post_with_http_info(cluster_id, input_type, template_inputs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param list[StackTemplateInput] template_inputs: templateInputs (required)
        :return: dict(str, list[StackTemplateInput])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'input_type', 'template_inputs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_inputs_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `create_template_inputs_using_post`")  # noqa: E501
        # verify the required parameter 'input_type' is set
        if self.api_client.client_side_validation and ('input_type' not in params or
                                                       params['input_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input_type` when calling `create_template_inputs_using_post`")  # noqa: E501
        # verify the required parameter 'template_inputs' is set
        if self.api_client.client_side_validation and ('template_inputs' not in params or
                                                       params['template_inputs'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_inputs` when calling `create_template_inputs_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'input_type' in params:
            path_params['inputType'] = params['input_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_inputs' in params:
            body_params = params['template_inputs']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, list[StackTemplateInput])',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_availability_schedule_using_delete(self, availability_schedule_id, cluster_id, **kwargs):  # noqa: E501
        """deleteAvailabilitySchedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_availability_schedule_using_delete(availability_schedule_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str availability_schedule_id: availabilityScheduleId (required)
        :param str cluster_id: clusterId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_availability_schedule_using_delete_with_http_info(availability_schedule_id, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_availability_schedule_using_delete_with_http_info(availability_schedule_id, cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_availability_schedule_using_delete_with_http_info(self, availability_schedule_id, cluster_id, **kwargs):  # noqa: E501
        """deleteAvailabilitySchedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_availability_schedule_using_delete_with_http_info(availability_schedule_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str availability_schedule_id: availabilityScheduleId (required)
        :param str cluster_id: clusterId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['availability_schedule_id', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_availability_schedule_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'availability_schedule_id' is set
        if self.api_client.client_side_validation and ('availability_schedule_id' not in params or
                                                       params['availability_schedule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `availability_schedule_id` when calling `delete_availability_schedule_using_delete`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_availability_schedule_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'availability_schedule_id' in params:
            path_params['availabilityScheduleId'] = params['availability_schedule_id']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/availability-schedule/{availabilityScheduleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cluster_force_using_delete(self, cluster_id, **kwargs):  # noqa: E501
        """deleteClusterForce  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_force_using_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_force_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_force_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_cluster_force_using_delete_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """deleteClusterForce  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_force_using_delete_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster_force_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_cluster_force_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/force', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cluster_schedule_using_delete(self, cluster_id, cluster_schedule_id, **kwargs):  # noqa: E501
        """deleteClusterSchedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_schedule_using_delete(cluster_id, cluster_schedule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str cluster_schedule_id: clusterScheduleId (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_schedule_using_delete_with_http_info(cluster_id, cluster_schedule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_schedule_using_delete_with_http_info(cluster_id, cluster_schedule_id, **kwargs)  # noqa: E501
            return data

    def delete_cluster_schedule_using_delete_with_http_info(self, cluster_id, cluster_schedule_id, **kwargs):  # noqa: E501
        """deleteClusterSchedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_schedule_using_delete_with_http_info(cluster_id, cluster_schedule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str cluster_schedule_id: clusterScheduleId (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'cluster_schedule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster_schedule_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_cluster_schedule_using_delete`")  # noqa: E501
        # verify the required parameter 'cluster_schedule_id' is set
        if self.api_client.client_side_validation and ('cluster_schedule_id' not in params or
                                                       params['cluster_schedule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_schedule_id` when calling `delete_cluster_schedule_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'cluster_schedule_id' in params:
            path_params['clusterScheduleId'] = params['cluster_schedule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterSchedule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cluster_tf_details_using_delete(self, cluster_id, **kwargs):  # noqa: E501
        """deleteClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_tf_details_using_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_tf_details_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_tf_details_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_cluster_tf_details_using_delete_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """deleteClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_tf_details_using_delete_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster_tf_details_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_cluster_tf_details_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFRunConfigurations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cluster_using_delete1(self, cluster_id, **kwargs):  # noqa: E501
        """deleteCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_using_delete1(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_using_delete1_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_using_delete1_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_cluster_using_delete1_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """deleteCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_using_delete1_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_cluster_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_overrides_using_delete(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """deleteOverrides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_overrides_using_delete(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :return: list[OverrideObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_overrides_using_delete_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_overrides_using_delete_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
            return data

    def delete_overrides_using_delete_with_http_info(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """deleteOverrides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_overrides_using_delete_with_http_info(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :return: list[OverrideObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_overrides_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_overrides_using_delete`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if self.api_client.client_side_validation and ('resource_name' not in params or
                                                       params['resource_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_name` when calling `delete_overrides_using_delete`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `delete_overrides_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/overrides/{resourceType}/{resourceName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OverrideObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_inputs_using_delete(self, cluster_id, input_type, uid, **kwargs):  # noqa: E501
        """deleteTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_inputs_using_delete(cluster_id, input_type, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param str uid: uid (required)
        :return: StackTemplateInput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_template_inputs_using_delete_with_http_info(cluster_id, input_type, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_inputs_using_delete_with_http_info(cluster_id, input_type, uid, **kwargs)  # noqa: E501
            return data

    def delete_template_inputs_using_delete_with_http_info(self, cluster_id, input_type, uid, **kwargs):  # noqa: E501
        """deleteTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_template_inputs_using_delete_with_http_info(cluster_id, input_type, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param str uid: uid (required)
        :return: StackTemplateInput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'input_type', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_inputs_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_template_inputs_using_delete`")  # noqa: E501
        # verify the required parameter 'input_type' is set
        if self.api_client.client_side_validation and ('input_type' not in params or
                                                       params['input_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input_type` when calling `delete_template_inputs_using_delete`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `delete_template_inputs_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'input_type' in params:
            path_params['inputType'] = params['input_type']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StackTemplateInput',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tools_config_using_delete(self, cluster_id, **kwargs):  # noqa: E501
        """deleteToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tools_config_using_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tools_config_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tools_config_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_tools_config_using_delete_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """deleteToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tools_config_using_delete_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tools_config_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `delete_tools_config_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tools-config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_image_using_delete(self, cluster_id, request, **kwargs):  # noqa: E501
        """detachImage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_image_using_delete(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ImageOverrideRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_image_using_delete_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_image_using_delete_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
            return data

    def detach_image_using_delete_with_http_info(self, cluster_id, request, **kwargs):  # noqa: E501
        """detachImage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_image_using_delete_with_http_info(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ImageOverrideRequest request: request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_image_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `detach_image_using_delete`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `detach_image_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/detachImage', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_cluster_task_using_post(self, **kwargs):  # noqa: E501
        """disableClusterTask  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_cluster_task_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: taskId
        :return: ClusterTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_cluster_task_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.disable_cluster_task_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def disable_cluster_task_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """disableClusterTask  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_cluster_task_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: taskId
        :return: ClusterTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_cluster_task_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/clusterTask/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_tools_config_using_put(self, cluster_id, tools_config, tools_config_id, **kwargs):  # noqa: E501
        """editToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_tools_config_using_put(cluster_id, tools_config, tools_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ToolsConfig tools_config: toolsConfig (required)
        :param str tools_config_id: toolsConfigId (required)
        :return: ToolsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_tools_config_using_put_with_http_info(cluster_id, tools_config, tools_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_tools_config_using_put_with_http_info(cluster_id, tools_config, tools_config_id, **kwargs)  # noqa: E501
            return data

    def edit_tools_config_using_put_with_http_info(self, cluster_id, tools_config, tools_config_id, **kwargs):  # noqa: E501
        """editToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_tools_config_using_put_with_http_info(cluster_id, tools_config, tools_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ToolsConfig tools_config: toolsConfig (required)
        :param str tools_config_id: toolsConfigId (required)
        :return: ToolsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'tools_config', 'tools_config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_tools_config_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `edit_tools_config_using_put`")  # noqa: E501
        # verify the required parameter 'tools_config' is set
        if self.api_client.client_side_validation and ('tools_config' not in params or
                                                       params['tools_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tools_config` when calling `edit_tools_config_using_put`")  # noqa: E501
        # verify the required parameter 'tools_config_id' is set
        if self.api_client.client_side_validation and ('tools_config_id' not in params or
                                                       params['tools_config_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tools_config_id` when calling `edit_tools_config_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'tools_config_id' in params:
            path_params['toolsConfigId'] = params['tools_config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tools_config' in params:
            body_params = params['tools_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tools-config/{toolsConfigId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_cluster_task_using_post(self, **kwargs):  # noqa: E501
        """enableClusterTask  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_cluster_task_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: taskId
        :return: ClusterTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_cluster_task_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.enable_cluster_task_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def enable_cluster_task_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """enableClusterTask  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_cluster_task_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: taskId
        :return: ClusterTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_cluster_task_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/clusterTask/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alerts_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getAlerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alerts_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alerts_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alerts_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_alerts_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getAlerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alerts_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_alerts_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_template_inputs_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getAllTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_inputs_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, list[StackTemplateInput])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_template_inputs_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_template_inputs_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_all_template_inputs_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getAllTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_template_inputs_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, list[StackTemplateInput])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_template_inputs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_all_template_inputs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/templateInputs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, list[StackTemplateInput])',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_availability_schedules_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getAvailabilitySchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_availability_schedules_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AvailabilitySchedule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_availability_schedules_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_availability_schedules_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_availability_schedules_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getAvailabilitySchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_availability_schedules_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AvailabilitySchedule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_availability_schedules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_availability_schedules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/availability-schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AvailabilitySchedule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_common_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterCommon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_common_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_common_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_common_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_common_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterCommon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_common_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_common_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_common_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_info_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_info_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_info_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_info_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_info_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterInfo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_info_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ClusterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_info_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_metadata_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterMetadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metadata_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ClusterMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_metadata_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_metadata_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_metadata_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterMetadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_metadata_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ClusterMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_metadata_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_metadata_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/cluster-metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_schedules_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterSchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_schedules_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_schedules_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_schedules_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_schedules_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterSchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_schedules_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_schedules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_schedules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterSchedule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_task_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterTask  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_task_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ClusterTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_task_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_task_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_task_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterTask  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_task_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ClusterTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_task_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_task_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/clusterTask', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_tf_details_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_tf_details_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_tf_details_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_tf_details_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_tf_details_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_tf_details_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_tf_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_tf_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFRunConfigurations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_k8s_credentials_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getK8sCredentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_k8s_credentials_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool refresh_permissions: refreshPermissions
        :return: KubernetesCredential
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_k8s_credentials_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_k8s_credentials_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_k8s_credentials_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getK8sCredentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_k8s_credentials_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool refresh_permissions: refreshPermissions
        :return: KubernetesCredential
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'refresh_permissions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_k8s_credentials_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_k8s_credentials_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'refresh_permissions' in params:
            query_params.append(('refreshPermissions', params['refresh_permissions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8sCredentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubernetesCredential',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kube_config_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getKubeConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_config_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kube_config_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kube_config_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_kube_config_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getKubeConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kube_config_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kube_config_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_kube_config_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/kubeconfig', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_matched_modules_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getMatchedModules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_matched_modules_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: MatchedModuleDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_matched_modules_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_matched_modules_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_matched_modules_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getMatchedModules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_matched_modules_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: MatchedModuleDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_matched_modules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_matched_modules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/match-modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MatchedModuleDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_namespaces_in_use_by_dependent_clusters_using_get(self, base_cluster_id, **kwargs):  # noqa: E501
        """getNamespacesInUseByDependentClusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_namespaces_in_use_by_dependent_clusters_using_get(base_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_cluster_id: baseClusterId (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_namespaces_in_use_by_dependent_clusters_using_get_with_http_info(base_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_namespaces_in_use_by_dependent_clusters_using_get_with_http_info(base_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_namespaces_in_use_by_dependent_clusters_using_get_with_http_info(self, base_cluster_id, **kwargs):  # noqa: E501
        """getNamespacesInUseByDependentClusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_namespaces_in_use_by_dependent_clusters_using_get_with_http_info(base_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_cluster_id: baseClusterId (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_namespaces_in_use_by_dependent_clusters_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base_cluster_id' is set
        if self.api_client.client_side_validation and ('base_cluster_id' not in params or
                                                       params['base_cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `base_cluster_id` when calling `get_namespaces_in_use_by_dependent_clusters_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'base_cluster_id' in params:
            path_params['baseClusterId'] = params['base_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{baseClusterId}/base-env-in-use-namespaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_open_alerts_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getOpenAlerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_open_alerts_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_open_alerts_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_open_alerts_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_open_alerts_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getOpenAlerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_open_alerts_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_open_alerts_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_open_alerts_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/open-alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_overrides_using_get1(self, cluster_id, **kwargs):  # noqa: E501
        """getOverrides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_overrides_using_get1(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[OverrideObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_overrides_using_get1_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_overrides_using_get1_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_overrides_using_get1_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getOverrides  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_overrides_using_get1_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[OverrideObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_overrides_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_overrides_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OverrideObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pinned_snapshot_using_get1(self, cluster_id, instance_name, resource_type, **kwargs):  # noqa: E501
        """getPinnedSnapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pinned_snapshot_using_get1(cluster_id, instance_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :return: SnapshotInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pinned_snapshot_using_get1_with_http_info(cluster_id, instance_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pinned_snapshot_using_get1_with_http_info(cluster_id, instance_name, resource_type, **kwargs)  # noqa: E501
            return data

    def get_pinned_snapshot_using_get1_with_http_info(self, cluster_id, instance_name, resource_type, **kwargs):  # noqa: E501
        """getPinnedSnapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pinned_snapshot_using_get1_with_http_info(cluster_id, instance_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :return: SnapshotInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'instance_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pinned_snapshot_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_pinned_snapshot_using_get1`")  # noqa: E501
        # verify the required parameter 'instance_name' is set
        if self.api_client.client_side_validation and ('instance_name' not in params or
                                                       params['instance_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instance_name` when calling `get_pinned_snapshot_using_get1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `get_pinned_snapshot_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'instance_name' in params:
            path_params['instanceName'] = params['instance_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provided_resources_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getProvidedResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provided_resources_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ProvidedResources
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provided_resources_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provided_resources_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_provided_resources_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getProvidedResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provided_resources_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ProvidedResources
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provided_resources_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_provided_resources_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/providedResources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvidedResources',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_release_impacts_using_get(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """getReleaseImpacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_impacts_using_get(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str attribute: attribute
        :param str change_type: changeType
        :param datetime end: end
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str release_type: releaseType
        :param datetime start: start
        :param str triggered_by: triggeredBy
        :return: PageResourceReleaseImpact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_release_impacts_using_get_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_release_impacts_using_get_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
            return data

    def get_release_impacts_using_get_with_http_info(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """getReleaseImpacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_impacts_using_get_with_http_info(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str attribute: attribute
        :param str change_type: changeType
        :param datetime end: end
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str release_type: releaseType
        :param datetime start: start
        :param str triggered_by: triggeredBy
        :return: PageResourceReleaseImpact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_name', 'resource_type', 'attribute', 'change_type', 'end', 'page_number', 'page_size', 'release_type', 'start', 'triggered_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_release_impacts_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_release_impacts_using_get`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if self.api_client.client_side_validation and ('resource_name' not in params or
                                                       params['resource_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_name` when calling `get_release_impacts_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `get_release_impacts_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []
        if 'attribute' in params:
            query_params.append(('attribute', params['attribute']))  # noqa: E501
        if 'change_type' in params:
            query_params.append(('changeType', params['change_type']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'release_type' in params:
            query_params.append(('releaseType', params['release_type']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'triggered_by' in params:
            query_params.append(('triggeredBy', params['triggered_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}/release-impacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageResourceReleaseImpact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_stats_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getResourceStats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_stats_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: BlueprintFileSummaryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_stats_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_stats_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_resource_stats_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getResourceStats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_stats_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: BlueprintFileSummaryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_stats_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_resource_stats_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/resource-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintFileSummaryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_input_by_uid_using_get(self, cluster_id, input_type, uid, **kwargs):  # noqa: E501
        """getTemplateInputByUid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_input_by_uid_using_get(cluster_id, input_type, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param str uid: uid (required)
        :return: StackTemplateInput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_input_by_uid_using_get_with_http_info(cluster_id, input_type, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_input_by_uid_using_get_with_http_info(cluster_id, input_type, uid, **kwargs)  # noqa: E501
            return data

    def get_template_input_by_uid_using_get_with_http_info(self, cluster_id, input_type, uid, **kwargs):  # noqa: E501
        """getTemplateInputByUid  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_input_by_uid_using_get_with_http_info(cluster_id, input_type, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param str uid: uid (required)
        :return: StackTemplateInput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'input_type', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_input_by_uid_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_template_input_by_uid_using_get`")  # noqa: E501
        # verify the required parameter 'input_type' is set
        if self.api_client.client_side_validation and ('input_type' not in params or
                                                       params['input_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input_type` when calling `get_template_input_by_uid_using_get`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_template_input_by_uid_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'input_type' in params:
            path_params['inputType'] = params['input_type']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StackTemplateInput',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_inputs_using_get(self, cluster_id, input_type, **kwargs):  # noqa: E501
        """getTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_inputs_using_get(cluster_id, input_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :return: list[StackTemplateInput]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_inputs_using_get_with_http_info(cluster_id, input_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_inputs_using_get_with_http_info(cluster_id, input_type, **kwargs)  # noqa: E501
            return data

    def get_template_inputs_using_get_with_http_info(self, cluster_id, input_type, **kwargs):  # noqa: E501
        """getTemplateInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_inputs_using_get_with_http_info(cluster_id, input_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :return: list[StackTemplateInput]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'input_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_inputs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_template_inputs_using_get`")  # noqa: E501
        # verify the required parameter 'input_type' is set
        if self.api_client.client_side_validation and ('input_type' not in params or
                                                       params['input_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input_type` when calling `get_template_inputs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'input_type' in params:
            path_params['inputType'] = params['input_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StackTemplateInput]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tools_config_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tools_config_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ToolsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tools_config_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tools_config_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_tools_config_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getToolsConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tools_config_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ToolsConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tools_config_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_tools_config_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tools-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ToolsConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variable_counts_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getVariableCounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variable_counts_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: VariableCountDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variable_counts_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variable_counts_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_variable_counts_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getVariableCounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variable_counts_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: VariableCountDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variable_counts_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_variable_counts_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/variable-counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VariableCountDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vars_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getVars  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vars_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vars_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vars_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_vars_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getVars  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vars_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vars_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_vars_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/vars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vars_with_secrets_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getVarsWithSecrets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vars_with_secrets_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vars_with_secrets_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vars_with_secrets_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_vars_with_secrets_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getVarsWithSecrets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vars_with_secrets_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vars_with_secrets_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_vars_with_secrets_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/vars-with-secrets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vars_with_status_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getVarsWithStatus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vars_with_status_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, Variables)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vars_with_status_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vars_with_status_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_vars_with_status_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getVarsWithStatus  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vars_with_status_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: dict(str, Variables)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vars_with_status_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_vars_with_status_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/varsWithStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, Variables)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpn_profile_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getVPNProfile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpn_profile_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpn_profile_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpn_profile_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_vpn_profile_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getVPNProfile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpn_profile_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpn_profile_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_vpn_profile_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/vpn-profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_snapshots_using_get1(self, cluster_id, instance_name, resource_type, **kwargs):  # noqa: E501
        """listSnapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_snapshots_using_get1(cluster_id, instance_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :return: list[SnapshotInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_snapshots_using_get1_with_http_info(cluster_id, instance_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.list_snapshots_using_get1_with_http_info(cluster_id, instance_name, resource_type, **kwargs)  # noqa: E501
            return data

    def list_snapshots_using_get1_with_http_info(self, cluster_id, instance_name, resource_type, **kwargs):  # noqa: E501
        """listSnapshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_snapshots_using_get1_with_http_info(cluster_id, instance_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :return: list[SnapshotInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'instance_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshots_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_snapshots_using_get1`")  # noqa: E501
        # verify the required parameter 'instance_name' is set
        if self.api_client.client_side_validation and ('instance_name' not in params or
                                                       params['instance_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instance_name` when calling `list_snapshots_using_get1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `list_snapshots_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'instance_name' in params:
            path_params['instanceName'] = params['instance_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SnapshotInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def override_sizing_using_post1(self, cluster_id, request, **kwargs):  # noqa: E501
        """overrideSizing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.override_sizing_using_post1(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param list[OverrideRequest] request: request (required)
        :return: list[OverrideObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.override_sizing_using_post1_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.override_sizing_using_post1_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
            return data

    def override_sizing_using_post1_with_http_info(self, cluster_id, request, **kwargs):  # noqa: E501
        """overrideSizing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.override_sizing_using_post1_with_http_info(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param list[OverrideRequest] request: request (required)
        :return: list[OverrideObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method override_sizing_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `override_sizing_using_post1`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `override_sizing_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/overrides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OverrideObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_release_using_post(self, cluster_id, pause_release_request, **kwargs):  # noqa: E501
        """pauseRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_release_using_post(cluster_id, pause_release_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param PauseReleaseRequest pause_release_request: pauseReleaseRequest (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pause_release_using_post_with_http_info(cluster_id, pause_release_request, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_release_using_post_with_http_info(cluster_id, pause_release_request, **kwargs)  # noqa: E501
            return data

    def pause_release_using_post_with_http_info(self, cluster_id, pause_release_request, **kwargs):  # noqa: E501
        """pauseRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_release_using_post_with_http_info(cluster_id, pause_release_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param PauseReleaseRequest pause_release_request: pauseReleaseRequest (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'pause_release_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_release_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `pause_release_using_post`")  # noqa: E501
        # verify the required parameter 'pause_release_request' is set
        if self.api_client.client_side_validation and ('pause_release_request' not in params or
                                                       params['pause_release_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pause_release_request` when calling `pause_release_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pause_release_request' in params:
            body_params = params['pause_release_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/pause-release', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pin_snapshot_using_post1(self, cluster_id, instance_name, resource_type, snapshot_info, **kwargs):  # noqa: E501
        """pinSnapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pin_snapshot_using_post1(cluster_id, instance_name, resource_type, snapshot_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :param SnapshotInfo snapshot_info: snapshotInfo (required)
        :return: SnapshotInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pin_snapshot_using_post1_with_http_info(cluster_id, instance_name, resource_type, snapshot_info, **kwargs)  # noqa: E501
        else:
            (data) = self.pin_snapshot_using_post1_with_http_info(cluster_id, instance_name, resource_type, snapshot_info, **kwargs)  # noqa: E501
            return data

    def pin_snapshot_using_post1_with_http_info(self, cluster_id, instance_name, resource_type, snapshot_info, **kwargs):  # noqa: E501
        """pinSnapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pin_snapshot_using_post1_with_http_info(cluster_id, instance_name, resource_type, snapshot_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str instance_name: instanceName (required)
        :param str resource_type: resourceType (required)
        :param SnapshotInfo snapshot_info: snapshotInfo (required)
        :return: SnapshotInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'instance_name', 'resource_type', 'snapshot_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pin_snapshot_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `pin_snapshot_using_post1`")  # noqa: E501
        # verify the required parameter 'instance_name' is set
        if self.api_client.client_side_validation and ('instance_name' not in params or
                                                       params['instance_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instance_name` when calling `pin_snapshot_using_post1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `pin_snapshot_using_post1`")  # noqa: E501
        # verify the required parameter 'snapshot_info' is set
        if self.api_client.client_side_validation and ('snapshot_info' not in params or
                                                       params['snapshot_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `snapshot_info` when calling `pin_snapshot_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'instance_name' in params:
            path_params['instanceName'] = params['instance_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'snapshot_info' in params:
            body_params = params['snapshot_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/dr/{resourceType}/snapshots/{instanceName}/pinnedSnapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_kube_config_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """refreshKubeConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_kube_config_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_kube_config_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_kube_config_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def refresh_kube_config_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """refreshKubeConfig  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_kube_config_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_kube_config_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `refresh_kube_config_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/kubeconfig/refresh', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_silence_using_delete(self, cluster_id, silence_id, **kwargs):  # noqa: E501
        """removeSilence  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_silence_using_delete(cluster_id, silence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str silence_id: silenceId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_silence_using_delete_with_http_info(cluster_id, silence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_silence_using_delete_with_http_info(cluster_id, silence_id, **kwargs)  # noqa: E501
            return data

    def remove_silence_using_delete_with_http_info(self, cluster_id, silence_id, **kwargs):  # noqa: E501
        """removeSilence  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_silence_using_delete_with_http_info(cluster_id, silence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str silence_id: silenceId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'silence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_silence_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `remove_silence_using_delete`")  # noqa: E501
        # verify the required parameter 'silence_id' is set
        if self.api_client.client_side_validation and ('silence_id' not in params or
                                                       params['silence_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `silence_id` when calling `remove_silence_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'silence_id' in params:
            path_params['silenceId'] = params['silence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/alerts/silence/{silenceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_details_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """resourceDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_details_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[ResourceDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resource_details_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_details_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def resource_details_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """resourceDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resource_details_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[ResourceDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `resource_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/resourceDetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_cluster_code_using_post(self, cluster_id, **kwargs):  # noqa: E501
        """setClusterCode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_cluster_code_using_post(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_cluster_code_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_cluster_code_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def set_cluster_code_using_post_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """setClusterCode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_cluster_code_using_post_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_cluster_code_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `set_cluster_code_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/setClusterCode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def silence_alerts_using_post(self, cluster_id, request, **kwargs):  # noqa: E501
        """silenceAlerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.silence_alerts_using_post(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param SilenceAlarmRequest request: request (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.silence_alerts_using_post_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.silence_alerts_using_post_with_http_info(cluster_id, request, **kwargs)  # noqa: E501
            return data

    def silence_alerts_using_post_with_http_info(self, cluster_id, request, **kwargs):  # noqa: E501
        """silenceAlerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.silence_alerts_using_post_with_http_info(cluster_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param SilenceAlarmRequest request: request (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method silence_alerts_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `silence_alerts_using_post`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `silence_alerts_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/silence-alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_availability_schedules_using_put(self, cluster_id, schedule_id, schedules, **kwargs):  # noqa: E501
        """updateAvailabilitySchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_availability_schedules_using_put(cluster_id, schedule_id, schedules, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str schedule_id: scheduleId (required)
        :param list[ScheduleRequest] schedules: schedules (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_availability_schedules_using_put_with_http_info(cluster_id, schedule_id, schedules, **kwargs)  # noqa: E501
        else:
            (data) = self.update_availability_schedules_using_put_with_http_info(cluster_id, schedule_id, schedules, **kwargs)  # noqa: E501
            return data

    def update_availability_schedules_using_put_with_http_info(self, cluster_id, schedule_id, schedules, **kwargs):  # noqa: E501
        """updateAvailabilitySchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_availability_schedules_using_put_with_http_info(cluster_id, schedule_id, schedules, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str schedule_id: scheduleId (required)
        :param list[ScheduleRequest] schedules: schedules (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'schedule_id', 'schedules']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_availability_schedules_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_availability_schedules_using_put`")  # noqa: E501
        # verify the required parameter 'schedule_id' is set
        if self.api_client.client_side_validation and ('schedule_id' not in params or
                                                       params['schedule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `schedule_id` when calling `update_availability_schedules_using_put`")  # noqa: E501
        # verify the required parameter 'schedules' is set
        if self.api_client.client_side_validation and ('schedules' not in params or
                                                       params['schedules'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `schedules` when calling `update_availability_schedules_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'schedule_id' in params:
            path_params['scheduleId'] = params['schedule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schedules' in params:
            body_params = params['schedules']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/availability-schedule/{scheduleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cluster_branch_using_patch(self, cluster_id, req, **kwargs):  # noqa: E501
        """updateClusterBranch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_branch_using_patch(cluster_id, req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param BranchUpdateRequest req: req (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cluster_branch_using_patch_with_http_info(cluster_id, req, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cluster_branch_using_patch_with_http_info(cluster_id, req, **kwargs)  # noqa: E501
            return data

    def update_cluster_branch_using_patch_with_http_info(self, cluster_id, req, **kwargs):  # noqa: E501
        """updateClusterBranch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_branch_using_patch_with_http_info(cluster_id, req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param BranchUpdateRequest req: req (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cluster_branch_using_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_cluster_branch_using_patch`")  # noqa: E501
        # verify the required parameter 'req' is set
        if self.api_client.client_side_validation and ('req' not in params or
                                                       params['req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `req` when calling `update_cluster_branch_using_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'req' in params:
            body_params = params['req']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/branch', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cluster_schedules_using_put(self, cluster_id, cluster_schedule_id, request, **kwargs):  # noqa: E501
        """updateClusterSchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_schedules_using_put(cluster_id, cluster_schedule_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str cluster_schedule_id: clusterScheduleId (required)
        :param ScheduleRequest request: request (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cluster_schedules_using_put_with_http_info(cluster_id, cluster_schedule_id, request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cluster_schedules_using_put_with_http_info(cluster_id, cluster_schedule_id, request, **kwargs)  # noqa: E501
            return data

    def update_cluster_schedules_using_put_with_http_info(self, cluster_id, cluster_schedule_id, request, **kwargs):  # noqa: E501
        """updateClusterSchedules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_schedules_using_put_with_http_info(cluster_id, cluster_schedule_id, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str cluster_schedule_id: clusterScheduleId (required)
        :param ScheduleRequest request: request (required)
        :return: list[ClusterSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'cluster_schedule_id', 'request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cluster_schedules_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_cluster_schedules_using_put`")  # noqa: E501
        # verify the required parameter 'cluster_schedule_id' is set
        if self.api_client.client_side_validation and ('cluster_schedule_id' not in params or
                                                       params['cluster_schedule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_schedule_id` when calling `update_cluster_schedules_using_put`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `update_cluster_schedules_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'cluster_schedule_id' in params:
            path_params['clusterScheduleId'] = params['cluster_schedule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/schedule/{clusterScheduleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterSchedule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cluster_tf_details_using_put(self, cluster_id, tf_run_configurations, **kwargs):  # noqa: E501
        """updateClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_tf_details_using_put(cluster_id, tf_run_configurations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param TFRunConfigurations tf_run_configurations: tfRunConfigurations (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cluster_tf_details_using_put_with_http_info(cluster_id, tf_run_configurations, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cluster_tf_details_using_put_with_http_info(cluster_id, tf_run_configurations, **kwargs)  # noqa: E501
            return data

    def update_cluster_tf_details_using_put_with_http_info(self, cluster_id, tf_run_configurations, **kwargs):  # noqa: E501
        """updateClusterTFDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cluster_tf_details_using_put_with_http_info(cluster_id, tf_run_configurations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param TFRunConfigurations tf_run_configurations: tfRunConfigurations (required)
        :return: TFRunConfigurations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'tf_run_configurations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cluster_tf_details_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_cluster_tf_details_using_put`")  # noqa: E501
        # verify the required parameter 'tf_run_configurations' is set
        if self.api_client.client_side_validation and ('tf_run_configurations' not in params or
                                                       params['tf_run_configurations'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tf_run_configurations` when calling `update_cluster_tf_details_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tf_run_configurations' in params:
            body_params = params['tf_run_configurations']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/tfRunConfigurations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFRunConfigurations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_draft_cluster_using_put(self, cluster_id, cluster_request, **kwargs):  # noqa: E501
        """updateDraftCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_cluster_using_put(cluster_id, cluster_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param DraftClusterRequest cluster_request: clusterRequest (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_draft_cluster_using_put_with_http_info(cluster_id, cluster_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_draft_cluster_using_put_with_http_info(cluster_id, cluster_request, **kwargs)  # noqa: E501
            return data

    def update_draft_cluster_using_put_with_http_info(self, cluster_id, cluster_request, **kwargs):  # noqa: E501
        """updateDraftCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_cluster_using_put_with_http_info(cluster_id, cluster_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param DraftClusterRequest cluster_request: clusterRequest (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'cluster_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_draft_cluster_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_draft_cluster_using_put`")  # noqa: E501
        # verify the required parameter 'cluster_request' is set
        if self.api_client.client_side_validation and ('cluster_request' not in params or
                                                       params['cluster_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_request` when calling `update_draft_cluster_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster_request' in params:
            body_params = params['cluster_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/draft-cluster/{clusterId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_input_using_put(self, cluster_id, input_type, template_input, uid, **kwargs):  # noqa: E501
        """updateTemplateInput  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_input_using_put(cluster_id, input_type, template_input, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param StackTemplateInput template_input: templateInput (required)
        :param str uid: uid (required)
        :return: StackTemplateInput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_input_using_put_with_http_info(cluster_id, input_type, template_input, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_input_using_put_with_http_info(cluster_id, input_type, template_input, uid, **kwargs)  # noqa: E501
            return data

    def update_template_input_using_put_with_http_info(self, cluster_id, input_type, template_input, uid, **kwargs):  # noqa: E501
        """updateTemplateInput  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_input_using_put_with_http_info(cluster_id, input_type, template_input, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str input_type: inputType (required)
        :param StackTemplateInput template_input: templateInput (required)
        :param str uid: uid (required)
        :return: StackTemplateInput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'input_type', 'template_input', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_input_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_template_input_using_put`")  # noqa: E501
        # verify the required parameter 'input_type' is set
        if self.api_client.client_side_validation and ('input_type' not in params or
                                                       params['input_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input_type` when calling `update_template_input_using_put`")  # noqa: E501
        # verify the required parameter 'template_input' is set
        if self.api_client.client_side_validation and ('template_input' not in params or
                                                       params['template_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_input` when calling `update_template_input_using_put`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `update_template_input_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'input_type' in params:
            path_params['inputType'] = params['input_type']  # noqa: E501
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_input' in params:
            body_params = params['template_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/templateInputs/{inputType}/items/{uid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StackTemplateInput',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_provided_resources_using_post(self, cluster_id, provided_resources, **kwargs):  # noqa: E501
        """upsertProvidedResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_provided_resources_using_post(cluster_id, provided_resources, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ProvidedResources provided_resources: providedResources (required)
        :return: ProvidedResources
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_provided_resources_using_post_with_http_info(cluster_id, provided_resources, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_provided_resources_using_post_with_http_info(cluster_id, provided_resources, **kwargs)  # noqa: E501
            return data

    def upsert_provided_resources_using_post_with_http_info(self, cluster_id, provided_resources, **kwargs):  # noqa: E501
        """upsertProvidedResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_provided_resources_using_post_with_http_info(cluster_id, provided_resources, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param ProvidedResources provided_resources: providedResources (required)
        :return: ProvidedResources
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'provided_resources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_provided_resources_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `upsert_provided_resources_using_post`")  # noqa: E501
        # verify the required parameter 'provided_resources' is set
        if self.api_client.client_side_validation and ('provided_resources' not in params or
                                                       params['provided_resources'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `provided_resources` when calling `upsert_provided_resources_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'provided_resources' in params:
            body_params = params['provided_resources']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/providedResources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvidedResources',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_vars_using_post1(self, cluster_id, cluster_vars, **kwargs):  # noqa: E501
        """upsertVars  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_vars_using_post1(cluster_id, cluster_vars, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param object cluster_vars: clusterVars (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_vars_using_post1_with_http_info(cluster_id, cluster_vars, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_vars_using_post1_with_http_info(cluster_id, cluster_vars, **kwargs)  # noqa: E501
            return data

    def upsert_vars_using_post1_with_http_info(self, cluster_id, cluster_vars, **kwargs):  # noqa: E501
        """upsertVars  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_vars_using_post1_with_http_info(cluster_id, cluster_vars, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param object cluster_vars: clusterVars (required)
        :return: AbstractCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'cluster_vars']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_vars_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and ('cluster_id' not in params or
                                                       params['cluster_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_id` when calling `upsert_vars_using_post1`")  # noqa: E501
        # verify the required parameter 'cluster_vars' is set
        if self.api_client.client_side_validation and ('cluster_vars' not in params or
                                                       params['cluster_vars'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cluster_vars` when calling `upsert_vars_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster_vars' in params:
            body_params = params['cluster_vars']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/vars/upsert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbstractCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
