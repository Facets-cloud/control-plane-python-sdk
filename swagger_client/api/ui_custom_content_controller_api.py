# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiCustomContentControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_content_file_using_post(self, content_file, **kwargs):  # noqa: E501
        """createContentFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_content_file_using_post(content_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContentFile content_file: contentFile (required)
        :return: ContentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_content_file_using_post_with_http_info(content_file, **kwargs)  # noqa: E501
        else:
            (data) = self.create_content_file_using_post_with_http_info(content_file, **kwargs)  # noqa: E501
            return data

    def create_content_file_using_post_with_http_info(self, content_file, **kwargs):  # noqa: E501
        """createContentFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_content_file_using_post_with_http_info(content_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContentFile content_file: contentFile (required)
        :return: ContentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_content_file_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_file' is set
        if self.api_client.client_side_validation and ('content_file' not in params or
                                                       params['content_file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_file` when calling `create_content_file_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'content_file' in params:
            body_params = params['content_file']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/content/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_content_file_using_delete(self, content_id, **kwargs):  # noqa: E501
        """deleteContentFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_file_using_delete(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: contentId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_content_file_using_delete_with_http_info(content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_content_file_using_delete_with_http_info(content_id, **kwargs)  # noqa: E501
            return data

    def delete_content_file_using_delete_with_http_info(self, content_id, **kwargs):  # noqa: E501
        """deleteContentFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_content_file_using_delete_with_http_info(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: contentId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content_file_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if self.api_client.client_side_validation and ('content_id' not in params or
                                                       params['content_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_id` when calling `delete_content_file_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in params:
            path_params['contentId'] = params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/content/files/{contentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_content_files_by_selectors_using_get(self, content_type, **kwargs):  # noqa: E501
        """getContentFilesBySelectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_files_by_selectors_using_get(content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: contentType (required)
        :param str display_type: displayType
        :param str resource_name: resourceName
        :param str resource_type: resourceType
        :param str sub_type: subType
        :return: list[ContentFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_content_files_by_selectors_using_get_with_http_info(content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_content_files_by_selectors_using_get_with_http_info(content_type, **kwargs)  # noqa: E501
            return data

    def get_content_files_by_selectors_using_get_with_http_info(self, content_type, **kwargs):  # noqa: E501
        """getContentFilesBySelectors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_content_files_by_selectors_using_get_with_http_info(content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: contentType (required)
        :param str display_type: displayType
        :param str resource_name: resourceName
        :param str resource_type: resourceType
        :param str sub_type: subType
        :return: list[ContentFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'display_type', 'resource_name', 'resource_type', 'sub_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_files_by_selectors_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `get_content_files_by_selectors_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_type' in params:
            path_params['contentType'] = params['content_type']  # noqa: E501

        query_params = []
        if 'display_type' in params:
            query_params.append(('displayType', params['display_type']))  # noqa: E501
        if 'resource_name' in params:
            query_params.append(('resourceName', params['resource_name']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resourceType', params['resource_type']))  # noqa: E501
        if 'sub_type' in params:
            query_params.append(('subType', params['sub_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/content/files/selectors/{contentType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContentFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_content_using_post(self, content_id, payload, **kwargs):  # noqa: E501
        """renderContent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_content_using_post(content_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: contentId (required)
        :param object payload: payload (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_content_using_post_with_http_info(content_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.render_content_using_post_with_http_info(content_id, payload, **kwargs)  # noqa: E501
            return data

    def render_content_using_post_with_http_info(self, content_id, payload, **kwargs):  # noqa: E501
        """renderContent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_content_using_post_with_http_info(content_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: contentId (required)
        :param object payload: payload (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id', 'payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_content_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if self.api_client.client_side_validation and ('content_id' not in params or
                                                       params['content_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_id` when calling `render_content_using_post`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `render_content_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in params:
            path_params['contentId'] = params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/content/files/{contentId}/render', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_content_file_using_put(self, content_id, updated_content, **kwargs):  # noqa: E501
        """updateContentFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_content_file_using_put(content_id, updated_content, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: contentId (required)
        :param ContentFile updated_content: updatedContent (required)
        :return: ContentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_content_file_using_put_with_http_info(content_id, updated_content, **kwargs)  # noqa: E501
        else:
            (data) = self.update_content_file_using_put_with_http_info(content_id, updated_content, **kwargs)  # noqa: E501
            return data

    def update_content_file_using_put_with_http_info(self, content_id, updated_content, **kwargs):  # noqa: E501
        """updateContentFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_content_file_using_put_with_http_info(content_id, updated_content, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_id: contentId (required)
        :param ContentFile updated_content: updatedContent (required)
        :return: ContentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id', 'updated_content']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_content_file_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if self.api_client.client_side_validation and ('content_id' not in params or
                                                       params['content_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_id` when calling `update_content_file_using_put`")  # noqa: E501
        # verify the required parameter 'updated_content' is set
        if self.api_client.client_side_validation and ('updated_content' not in params or
                                                       params['updated_content'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `updated_content` when calling `update_content_file_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in params:
            path_params['contentId'] = params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'updated_content' in params:
            body_params = params['updated_content']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/content/files/{contentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
