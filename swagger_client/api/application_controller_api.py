# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApplicationControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def build(self, body, application_family, application_id, **kwargs):  # noqa: E501
        """build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build(body, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoBuild body: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.build_with_http_info(body, application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.build_with_http_info(body, application_family, application_id, **kwargs)  # noqa: E501
            return data

    def build_with_http_info(self, body, application_family, application_id, **kwargs):  # noqa: E501
        """build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_with_http_info(body, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoBuild body: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `build`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `build`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoBuild',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_password(self, body, user_id, **kwargs):  # noqa: E501
        """change_password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_password(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoPasswordChange body: (required)
        :param str user_id: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_password_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_password_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def change_password_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """change_password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_password_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoPasswordChange body: (required)
        :param str user_id: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_password`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `change_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/users/{userId}/changePassword', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_app_secret_request(self, body, application_family, application_id, **kwargs):  # noqa: E501
        """create_app_secret_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_app_secret_request(body, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ComCapillaryOpsDeployerBoApplicationSecretRequestSecretName] body: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretRequestSecretName]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_app_secret_request_with_http_info(body, application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_app_secret_request_with_http_info(body, application_family, application_id, **kwargs)  # noqa: E501
            return data

    def create_app_secret_request_with_http_info(self, body, application_family, application_id, **kwargs):  # noqa: E501
        """create_app_secret_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_app_secret_request_with_http_info(body, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ComCapillaryOpsDeployerBoApplicationSecretRequestSecretName] body: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretRequestSecretName]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_app_secret_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_app_secret_request`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `create_app_secret_request`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `create_app_secret_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/secretRequests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplicationSecretRequestSecretName]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application(self, body, application_family, **kwargs):  # noqa: E501
        """create_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoApplication body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_with_http_info(body, application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_with_http_info(body, application_family, **kwargs)  # noqa: E501
            return data

    def create_application_with_http_info(self, body, application_family, **kwargs):  # noqa: E501
        """create_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_with_http_info(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoApplication body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `create_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ecr_registry(self, body, **kwargs):  # noqa: E501
        """create_ecr_registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ecr_registry(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoECRRegistry body: (required)
        :return: ComCapillaryOpsDeployerBoECRRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ecr_registry_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ecr_registry_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ecr_registry_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_ecr_registry  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ecr_registry_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoECRRegistry body: (required)
        :return: ComCapillaryOpsDeployerBoECRRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ecr_registry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ecr_registry`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/ecrRegistry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoECRRegistry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_generic_action(self, body, build_type, **kwargs):  # noqa: E501
        """create_generic_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generic_action(body, build_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoActionsApplicationAction body: (required)
        :param str build_type: (required)
        :return: ComCapillaryOpsDeployerBoActionsApplicationAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_generic_action_with_http_info(body, build_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_generic_action_with_http_info(body, build_type, **kwargs)  # noqa: E501
            return data

    def create_generic_action_with_http_info(self, body, build_type, **kwargs):  # noqa: E501
        """create_generic_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generic_action_with_http_info(body, build_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoActionsApplicationAction body: (required)
        :param str build_type: (required)
        :return: ComCapillaryOpsDeployerBoActionsApplicationAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'build_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_generic_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_generic_action`")  # noqa: E501
        # verify the required parameter 'build_type' is set
        if ('build_type' not in params or
                params['build_type'] is None):
            raise ValueError("Missing the required parameter `build_type` when calling `create_generic_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_type' in params:
            path_params['buildType'] = params['build_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/buildType/{buildType}/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoActionsApplicationAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user(self, body, **kwargs):  # noqa: E501
        """create_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoUser body: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoUser body: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_cc(self, body, **kwargs):  # noqa: E501
        """create_user_cc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_cc(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoUser body: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_cc_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_cc_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_user_cc_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_user_cc  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_cc_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoUser body: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_cc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_user_cc`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/cc-users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application(self, application_family, application_id, **kwargs):  # noqa: E501
        """delete_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def delete_application_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """delete_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `delete_application`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `delete_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_secret(self, application_family, environment, application_id, secret_name, **kwargs):  # noqa: E501
        """delete_application_secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_secret(application_family, environment, application_id, secret_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str secret_name: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_secret_with_http_info(application_family, environment, application_id, secret_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_secret_with_http_info(application_family, environment, application_id, secret_name, **kwargs)  # noqa: E501
            return data

    def delete_application_secret_with_http_info(self, application_family, environment, application_id, secret_name, **kwargs):  # noqa: E501
        """delete_application_secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_secret_with_http_info(application_family, environment, application_id, secret_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str secret_name: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'application_id', 'secret_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `delete_application_secret`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `delete_application_secret`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `delete_application_secret`")  # noqa: E501
        # verify the required parameter 'secret_name' is set
        if ('secret_name' not in params or
                params['secret_name'] is None):
            raise ValueError("Missing the required parameter `secret_name` when calling `delete_application_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'secret_name' in params:
            path_params['secretName'] = params['secret_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/secrets/{secretName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy(self, body, application_family, environment, application_id, **kwargs):  # noqa: E501
        """deploy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy(body, application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoDeployment body: (required)
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoDeployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_with_http_info(body, application_family, environment, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_with_http_info(body, application_family, environment, application_id, **kwargs)  # noqa: E501
            return data

    def deploy_with_http_info(self, body, application_family, environment, application_id, **kwargs):  # noqa: E501
        """deploy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_with_http_info(body, application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoDeployment body: (required)
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoDeployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family', 'environment', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deploy`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `deploy`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `deploy`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `deploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoDeployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_alerting(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """disable_alerting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_alerting(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_alerting_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_alerting_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def disable_alerting_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """disable_alerting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_alerting_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_alerting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `disable_alerting`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `disable_alerting`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `disable_alerting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/alerting', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_monitoring(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """disable_monitoring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_monitoring(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_monitoring_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_monitoring_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def disable_monitoring_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """disable_monitoring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_monitoring_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_monitoring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `disable_monitoring`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `disable_monitoring`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `disable_monitoring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_dump_file(self, application_family, environment, path, application_id, **kwargs):  # noqa: E501
        """download_dump_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_dump_file(application_family, environment, path, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str path: (required)
        :param str application_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_dump_file_with_http_info(application_family, environment, path, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_dump_file_with_http_info(application_family, environment, path, application_id, **kwargs)  # noqa: E501
            return data

    def download_dump_file_with_http_info(self, application_family, environment, path, application_id, **kwargs):  # noqa: E501
        """download_dump_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_dump_file_with_http_info(application_family, environment, path, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str path: (required)
        :param str application_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'path', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_dump_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `download_dump_file`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `download_dump_file`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `download_dump_file`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `download_dump_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/dumps/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_test_report(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """download_test_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_test_report(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_test_report_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_test_report_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
            return data

    def download_test_report_with_http_info(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """download_test_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_test_report_with_http_info(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_test_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `download_test_report`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `download_test_report`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `download_test_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/downloadArtifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_alerting(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """enable_alerting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_alerting(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_alerting_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_alerting_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def enable_alerting_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """enable_alerting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_alerting_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_alerting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `enable_alerting`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `enable_alerting`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `enable_alerting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/alerting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_monitoring(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """enable_monitoring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_monitoring(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_monitoring_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_monitoring_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def enable_monitoring_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """enable_monitoring  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_monitoring_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_monitoring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `enable_monitoring`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `enable_monitoring`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `enable_monitoring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_action_on_pod(self, body, application_family, environment, application_id, pod_name, **kwargs):  # noqa: E501
        """execute_action_on_pod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_action_on_pod(body, application_family, environment, application_id, pod_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoActionsApplicationAction body: (required)
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str pod_name: (required)
        :return: ComCapillaryOpsDeployerBoActionsActionExecution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_action_on_pod_with_http_info(body, application_family, environment, application_id, pod_name, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_action_on_pod_with_http_info(body, application_family, environment, application_id, pod_name, **kwargs)  # noqa: E501
            return data

    def execute_action_on_pod_with_http_info(self, body, application_family, environment, application_id, pod_name, **kwargs):  # noqa: E501
        """execute_action_on_pod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_action_on_pod_with_http_info(body, application_family, environment, application_id, pod_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoActionsApplicationAction body: (required)
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str pod_name: (required)
        :return: ComCapillaryOpsDeployerBoActionsActionExecution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family', 'environment', 'application_id', 'pod_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_action_on_pod" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_action_on_pod`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `execute_action_on_pod`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `execute_action_on_pod`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `execute_action_on_pod`")  # noqa: E501
        # verify the required parameter 'pod_name' is set
        if ('pod_name' not in params or
                params['pod_name'] is None):
            raise ValueError("Missing the required parameter `pod_name` when calling `execute_action_on_pod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'pod_name' in params:
            path_params['podName'] = params['pod_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/pods/{podName}/actions/executeAction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoActionsActionExecution',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_for_pod(self, application_family, environment, application_id, pod_name, **kwargs):  # noqa: E501
        """get_actions_for_pod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_for_pod(application_family, environment, application_id, pod_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str pod_name: (required)
        :return: list[ComCapillaryOpsDeployerBoActionsApplicationAction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_for_pod_with_http_info(application_family, environment, application_id, pod_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_for_pod_with_http_info(application_family, environment, application_id, pod_name, **kwargs)  # noqa: E501
            return data

    def get_actions_for_pod_with_http_info(self, application_family, environment, application_id, pod_name, **kwargs):  # noqa: E501
        """get_actions_for_pod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_for_pod_with_http_info(application_family, environment, application_id, pod_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str pod_name: (required)
        :return: list[ComCapillaryOpsDeployerBoActionsApplicationAction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'application_id', 'pod_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_for_pod" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_actions_for_pod`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_actions_for_pod`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_actions_for_pod`")  # noqa: E501
        # verify the required parameter 'pod_name' is set
        if ('pod_name' not in params or
                params['pod_name'] is None):
            raise ValueError("Missing the required parameter `pod_name` when calling `get_actions_for_pod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'pod_name' in params:
            path_params['podName'] = params['pod_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/pods/{podName}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoActionsApplicationAction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alerting_details(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """get_alerting_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alerting_details(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: ComCapillaryOpsDeployerBoAlerting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alerting_details_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alerting_details_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def get_alerting_details_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """get_alerting_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alerting_details_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: ComCapillaryOpsDeployerBoAlerting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerting_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_alerting_details`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_alerting_details`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_alerting_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/alerting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoAlerting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_application_metrics(self, application_family, **kwargs):  # noqa: E501
        """get_all_application_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_metrics(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationMetricsWrapper]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_application_metrics_with_http_info(application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_application_metrics_with_http_info(application_family, **kwargs)  # noqa: E501
            return data

    def get_all_application_metrics_with_http_info(self, application_family, **kwargs):  # noqa: E501
        """get_all_application_metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_application_metrics_with_http_info(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationMetricsWrapper]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_application_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_all_application_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/appmetrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplicationMetricsWrapper]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_registries(self, **kwargs):  # noqa: E501
        """get_all_registries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_registries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ComCapillaryOpsDeployerBoRegistry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_registries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_registries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_registries_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_registries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_registries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ComCapillaryOpsDeployerBoRegistry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_registries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/getRegistries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoRegistry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application1(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application1(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application1_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application1_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_application1_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application1_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application1`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_branches(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_branches(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_branches_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_branches_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_application_branches_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_branches_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_branches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application_branches`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_branches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/branches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_families(self, **kwargs):  # noqa: E501
        """get_application_families  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_families(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_families_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_application_families_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_application_families_with_http_info(self, **kwargs):  # noqa: E501
        """get_application_families  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_families_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_families" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/applicationFamilies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_metric_summary(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_metric_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_metric_summary(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: dict(str, ComCapillaryOpsDeployerBoApplicationMetrics)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_metric_summary_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_metric_summary_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_application_metric_summary_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_metric_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_metric_summary_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: dict(str, ComCapillaryOpsDeployerBoApplicationMetrics)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_metric_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application_metric_summary`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_metric_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, ComCapillaryOpsDeployerBoApplicationMetrics)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_pod_details(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_application_pod_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_pod_details(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationPodDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_pod_details_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_pod_details_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
            return data

    def get_application_pod_details_with_http_info(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_application_pod_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_pod_details_with_http_info(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationPodDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_pod_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application_pod_details`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_application_pod_details`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_pod_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/podDetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplicationPodDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_secret_requests(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_secret_requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_secret_requests(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_secret_requests_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_secret_requests_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_application_secret_requests_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_secret_requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_secret_requests_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_secret_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application_secret_requests`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_secret_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/secretRequests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplicationSecretRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_secrets(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_application_secrets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_secrets(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretSecretName]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_secrets_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_secrets_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
            return data

    def get_application_secrets_with_http_info(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_application_secrets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_secrets_with_http_info(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretSecretName]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_secrets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application_secrets`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_application_secrets`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_secrets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/secretRequests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplicationSecretSecretName]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_tags(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_tags(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_tags_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_tags_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_application_tags_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_application_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_tags_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_application_tags`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_types(self, **kwargs):  # noqa: E501
        """get_application_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_application_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_application_types_with_http_info(self, **kwargs):  # noqa: E501
        """get_application_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/applicationTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_applications(self, application_family, **kwargs):  # noqa: E501
        """get_applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_applications_with_http_info(application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.get_applications_with_http_info(application_family, **kwargs)  # noqa: E501
            return data

    def get_applications_with_http_info(self, application_family, **kwargs):  # noqa: E501
        """get_applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_with_http_info(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_applications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplication]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_build(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """get_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: ComCapillaryOpsDeployerBoBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_build_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_build_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
            return data

    def get_build_with_http_info(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """get_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_with_http_info(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: ComCapillaryOpsDeployerBoBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_build`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_build`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `get_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds/{buildId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoBuild',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_build_logs(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """get_build_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_logs(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :param str next_token:
        :return: ComCapillaryOpsDeployerBoTokenPaginatedResponseComCapillaryOpsDeployerBoLogEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_build_logs_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_build_logs_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
            return data

    def get_build_logs_with_http_info(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """get_build_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_logs_with_http_info(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :param str next_token:
        :return: ComCapillaryOpsDeployerBoTokenPaginatedResponseComCapillaryOpsDeployerBoLogEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'build_id', 'next_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_build_logs`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_build_logs`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `get_build_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []
        if 'next_token' in params:
            query_params.append(('nextToken', params['next_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoTokenPaginatedResponseComCapillaryOpsDeployerBoLogEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_builds(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_builds(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoBuild]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_builds_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_builds_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_builds_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_builds_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoBuild]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_builds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_builds`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoBuild]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cc_environment_meta_data(self, application_family, **kwargs):  # noqa: E501
        """get_cc_environment_meta_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cc_environment_meta_data(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoEnvironmentMetaData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cc_environment_meta_data_with_http_info(application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cc_environment_meta_data_with_http_info(application_family, **kwargs)  # noqa: E501
            return data

    def get_cc_environment_meta_data_with_http_info(self, application_family, **kwargs):  # noqa: E501
        """get_cc_environment_meta_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cc_environment_meta_data_with_http_info(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoEnvironmentMetaData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cc_environment_meta_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_cc_environment_meta_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/cc/{applicationFamily}/environmentMetaData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoEnvironmentMetaData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_deployment(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """get_current_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_deployment(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: ComCapillaryOpsDeployerBoDeployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_deployment_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_deployment_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def get_current_deployment_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """get_current_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_deployment_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: ComCapillaryOpsDeployerBoDeployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_current_deployment`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_current_deployment`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_current_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/deployment/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoDeployment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployment_status(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_deployment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_status(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoDeploymentStatusDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployment_status_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployment_status_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
            return data

    def get_deployment_status_with_http_info(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_deployment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_status_with_http_info(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: ComCapillaryOpsDeployerBoDeploymentStatusDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_deployment_status`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_deployment_status`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_deployment_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/deploymentStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoDeploymentStatusDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dump_file_list(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_dump_file_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dump_file_list(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str _date:
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dump_file_list_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dump_file_list_with_http_info(application_family, environment, application_id, **kwargs)  # noqa: E501
            return data

    def get_dump_file_list_with_http_info(self, application_family, environment, application_id, **kwargs):  # noqa: E501
        """get_dump_file_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dump_file_list_with_http_info(application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :param str _date:
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment', 'application_id', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dump_file_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_dump_file_list`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_dump_file_list`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_dump_file_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/dumps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ecr_token(self, host, **kwargs):  # noqa: E501
        """get_ecr_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ecr_token(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ecr_token_with_http_info(host, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ecr_token_with_http_info(host, **kwargs)  # noqa: E501
            return data

    def get_ecr_token_with_http_info(self, host, **kwargs):  # noqa: E501
        """get_ecr_token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ecr_token_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ecr_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `get_ecr_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'host' in params:
            header_params['Host'] = params['host']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/getEcrLoginToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_environment(self, application_family, id, **kwargs):  # noqa: E501
        """get_environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment(application_family, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str id: (required)
        :return: ComCapillaryOpsDeployerBoEnvironment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_environment_with_http_info(application_family, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_environment_with_http_info(application_family, id, **kwargs)  # noqa: E501
            return data

    def get_environment_with_http_info(self, application_family, id, **kwargs):  # noqa: E501
        """get_environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment_with_http_info(application_family, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str id: (required)
        :return: ComCapillaryOpsDeployerBoEnvironment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_environment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_environment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/environments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoEnvironment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_environment_meta_data(self, application_family, **kwargs):  # noqa: E501
        """get_environment_meta_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment_meta_data(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoEnvironmentMetaData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_environment_meta_data_with_http_info(application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.get_environment_meta_data_with_http_info(application_family, **kwargs)  # noqa: E501
            return data

    def get_environment_meta_data_with_http_info(self, application_family, **kwargs):  # noqa: E501
        """get_environment_meta_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment_meta_data_with_http_info(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoEnvironmentMetaData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_meta_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_environment_meta_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/environmentMetaData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoEnvironmentMetaData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_environments(self, application_family, **kwargs):  # noqa: E501
        """get_environments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoEnvironment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_environments_with_http_info(application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.get_environments_with_http_info(application_family, **kwargs)  # noqa: E501
            return data

    def get_environments_with_http_info(self, application_family, **kwargs):  # noqa: E501
        """get_environments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_with_http_info(application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :return: list[ComCapillaryOpsDeployerBoEnvironment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_environments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/environments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoEnvironment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_executed_actions_for_application(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_executed_actions_for_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_executed_actions_for_application(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoActionsActionExecution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_executed_actions_for_application_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_executed_actions_for_application_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_executed_actions_for_application_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_executed_actions_for_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_executed_actions_for_application_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoActionsActionExecution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_executed_actions_for_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_executed_actions_for_application`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_executed_actions_for_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/executedActions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoActionsActionExecution]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_images(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_images(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_images_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_images_with_http_info(application_family, application_id, **kwargs)  # noqa: E501
            return data

    def get_images_with_http_info(self, application_family, application_id, **kwargs):  # noqa: E501
        """get_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_images_with_http_info(application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_images`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_monitoring_details(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """get_monitoring_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitoring_details(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: ComCapillaryOpsDeployerBoMonitoring
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_monitoring_details_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.get_monitoring_details_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def get_monitoring_details_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """get_monitoring_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitoring_details_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: ComCapillaryOpsDeployerBoMonitoring
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_monitoring_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_monitoring_details`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_monitoring_details`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_monitoring_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/monitoring', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoMonitoring',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_build_details(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """get_test_build_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_build_details(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: ComCapillaryOpsDeployerBoTestBuildDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_build_details_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_build_details_with_http_info(application_family, application_id, build_id, **kwargs)  # noqa: E501
            return data

    def get_test_build_details_with_http_info(self, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """get_test_build_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_build_details_with_http_info(application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: ComCapillaryOpsDeployerBoTestBuildDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_build_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `get_test_build_details`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `get_test_build_details`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `get_test_build_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds/{buildId}/testDetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoTestBuildDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users(self, **kwargs):  # noqa: E501
        """get_users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ComCapillaryOpsDeployerBoUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_users_with_http_info(self, **kwargs):  # noqa: E501
        """get_users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ComCapillaryOpsDeployerBoUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def global_stats(self, **kwargs):  # noqa: E501
        """global_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ComCapillaryOpsDeployerBoGlobalStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.global_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.global_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def global_stats_with_http_info(self, **kwargs):  # noqa: E501
        """global_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.global_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ComCapillaryOpsDeployerBoGlobalStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method global_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoGlobalStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def halt_application(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """halt_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.halt_application(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.halt_application_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.halt_application_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def halt_application_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """halt_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.halt_application_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method halt_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `halt_application`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `halt_application`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `halt_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/halt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login(self, **kwargs):  # noqa: E501
        """login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login_with_http_info(**kwargs)  # noqa: E501
            return data

    def login_with_http_info(self, **kwargs):  # noqa: E501
        """login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login1(self, **kwargs):  # noqa: E501
        """login1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login1_with_http_info(**kwargs)  # noqa: E501
            return data

    def login1_with_http_info(self, **kwargs):  # noqa: E501
        """login1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login2(self, **kwargs):  # noqa: E501
        """login2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login2_with_http_info(**kwargs)  # noqa: E501
            return data

    def login2_with_http_info(self, **kwargs):  # noqa: E501
        """login2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login3(self, **kwargs):  # noqa: E501
        """login3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login3_with_http_info(**kwargs)  # noqa: E501
            return data

    def login3_with_http_info(self, **kwargs):  # noqa: E501
        """login3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login3" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login4(self, **kwargs):  # noqa: E501
        """login4  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login4(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login4_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login4_with_http_info(**kwargs)  # noqa: E501
            return data

    def login4_with_http_info(self, **kwargs):  # noqa: E501
        """login4  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login4_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login4" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login5(self, **kwargs):  # noqa: E501
        """login5  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login5(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login5_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login5_with_http_info(**kwargs)  # noqa: E501
            return data

    def login5_with_http_info(self, **kwargs):  # noqa: E501
        """login5  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login5_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login5" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login6(self, **kwargs):  # noqa: E501
        """login6  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login6(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login6_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.login6_with_http_info(**kwargs)  # noqa: E501
            return data

    def login6_with_http_info(self, **kwargs):  # noqa: E501
        """login6  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login6_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login6" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def me(self, **kwargs):  # noqa: E501
        """me  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ComCapillaryOpsDeployerServiceOAuth2UserServiceImplSimpleOauth2User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.me_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.me_with_http_info(**kwargs)  # noqa: E501
            return data

    def me_with_http_info(self, **kwargs):  # noqa: E501
        """me  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ComCapillaryOpsDeployerServiceOAuth2UserServiceImplSimpleOauth2User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerServiceOAuth2UserServiceImplSimpleOauth2User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def process_webhook_pr_bitbucket(self, body, x_event_key, host, application_family, application_id, **kwargs):  # noqa: E501
        """process_webhook_pr_bitbucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.process_webhook_pr_bitbucket(body, x_event_key, host, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoWebhookBitbucketBitbucketPREvent body: (required)
        :param str x_event_key: (required)
        :param str host: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.process_webhook_pr_bitbucket_with_http_info(body, x_event_key, host, application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.process_webhook_pr_bitbucket_with_http_info(body, x_event_key, host, application_family, application_id, **kwargs)  # noqa: E501
            return data

    def process_webhook_pr_bitbucket_with_http_info(self, body, x_event_key, host, application_family, application_id, **kwargs):  # noqa: E501
        """process_webhook_pr_bitbucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.process_webhook_pr_bitbucket_with_http_info(body, x_event_key, host, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoWebhookBitbucketBitbucketPREvent body: (required)
        :param str x_event_key: (required)
        :param str host: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_event_key', 'host', 'application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method process_webhook_pr_bitbucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `process_webhook_pr_bitbucket`")  # noqa: E501
        # verify the required parameter 'x_event_key' is set
        if ('x_event_key' not in params or
                params['x_event_key'] is None):
            raise ValueError("Missing the required parameter `x_event_key` when calling `process_webhook_pr_bitbucket`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `process_webhook_pr_bitbucket`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `process_webhook_pr_bitbucket`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `process_webhook_pr_bitbucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_event_key' in params:
            header_params['X-Event-Key'] = params['x_event_key']  # noqa: E501
        if 'host' in params:
            header_params['Host'] = params['host']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/webhooks/pr/bitbucket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def process_webhook_pr_github(self, body, host, application_family, application_id, **kwargs):  # noqa: E501
        """process_webhook_pr_github  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.process_webhook_pr_github(body, host, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoWebhookGithubGithubPREvent body: (required)
        :param str host: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.process_webhook_pr_github_with_http_info(body, host, application_family, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.process_webhook_pr_github_with_http_info(body, host, application_family, application_id, **kwargs)  # noqa: E501
            return data

    def process_webhook_pr_github_with_http_info(self, body, host, application_family, application_id, **kwargs):  # noqa: E501
        """process_webhook_pr_github  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.process_webhook_pr_github_with_http_info(body, host, application_family, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoWebhookGithubGithubPREvent body: (required)
        :param str host: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'host', 'application_family', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method process_webhook_pr_github" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `process_webhook_pr_github`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `process_webhook_pr_github`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `process_webhook_pr_github`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `process_webhook_pr_github`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'host' in params:
            header_params['Host'] = params['host']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/webhooks/pr/github', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redeploy(self, application_family, environment, **kwargs):  # noqa: E501
        """redeploy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redeploy(application_family, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :return: dict(str, bool)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redeploy_with_http_info(application_family, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.redeploy_with_http_info(application_family, environment, **kwargs)  # noqa: E501
            return data

    def redeploy_with_http_info(self, application_family, environment, **kwargs):  # noqa: E501
        """redeploy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redeploy_with_http_info(application_family, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str environment: (required)
        :return: dict(str, bool)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redeploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `redeploy`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `redeploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/redeployment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, bool)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_build_details(self, code_build_id, **kwargs):  # noqa: E501
        """refresh_build_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_build_details(code_build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code_build_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_build_details_with_http_info(code_build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_build_details_with_http_info(code_build_id, **kwargs)  # noqa: E501
            return data

    def refresh_build_details_with_http_info(self, code_build_id, **kwargs):  # noqa: E501
        """refresh_build_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_build_details_with_http_info(code_build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code_build_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code_build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_build_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code_build_id' is set
        if ('code_build_id' not in params or
                params['code_build_id'] is None):
            raise ValueError("Missing the required parameter `code_build_id` when calling `refresh_build_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code_build_id' in params:
            path_params['codeBuildId'] = params['code_build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/codebuild/builds/{codeBuildId}/refresh', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_application(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """resume_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_application(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_application_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_application_with_http_info(application_family, application_id, environment, **kwargs)  # noqa: E501
            return data

    def resume_application_with_http_info(self, application_family, application_id, environment, **kwargs):  # noqa: E501
        """resume_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_application_with_http_info(application_family, application_id, environment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_family: (required)
        :param str application_id: (required)
        :param str environment: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_family', 'application_id', 'environment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `resume_application`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `resume_application`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `resume_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application(self, body, application_family, **kwargs):  # noqa: E501
        """update_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoApplication body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_with_http_info(body, application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_with_http_info(body, application_family, **kwargs)  # noqa: E501
            return data

    def update_application_with_http_info(self, body, application_family, **kwargs):  # noqa: E501
        """update_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_with_http_info(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoApplication body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `update_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_secrets(self, body, application_family, environment, application_id, **kwargs):  # noqa: E501
        """update_application_secrets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_secrets(body, application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ComCapillaryOpsDeployerBoApplicationSecretSecretName] body: (required)
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretSecretName]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_secrets_with_http_info(body, application_family, environment, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_secrets_with_http_info(body, application_family, environment, application_id, **kwargs)  # noqa: E501
            return data

    def update_application_secrets_with_http_info(self, body, application_family, environment, application_id, **kwargs):  # noqa: E501
        """update_application_secrets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_secrets_with_http_info(body, application_family, environment, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ComCapillaryOpsDeployerBoApplicationSecretSecretName] body: (required)
        :param str application_family: (required)
        :param str environment: (required)
        :param str application_id: (required)
        :return: list[ComCapillaryOpsDeployerBoApplicationSecretSecretName]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family', 'environment', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_secrets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_secrets`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `update_application_secrets`")  # noqa: E501
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `update_application_secrets`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `update_application_secrets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/{environment}/applications/{applicationId}/secrets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComCapillaryOpsDeployerBoApplicationSecretSecretName]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_build(self, body, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """update_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build(body, application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoBuild body: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: ComCapillaryOpsDeployerBoBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_build_with_http_info(body, application_family, application_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_build_with_http_info(body, application_family, application_id, build_id, **kwargs)  # noqa: E501
            return data

    def update_build_with_http_info(self, body, application_family, application_id, build_id, **kwargs):  # noqa: E501
        """update_build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_with_http_info(body, application_family, application_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoBuild body: (required)
        :param str application_family: (required)
        :param str application_id: (required)
        :param str build_id: (required)
        :return: ComCapillaryOpsDeployerBoBuild
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family', 'application_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_build`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `update_build`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `update_build`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in params or
                params['build_id'] is None):
            raise ValueError("Missing the required parameter `build_id` when calling `update_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'build_id' in params:
            path_params['buildId'] = params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/applications/{applicationId}/builds/{buildId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoBuild',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user(self, body, user_id, **kwargs):  # noqa: E501
        """update_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoUser body: (required)
        :param str user_id: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def update_user_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """update_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoUser body: (required)
        :param str user_id: (required)
        :return: ComCapillaryOpsDeployerBoUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/users/{userId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_application_family_metadata(self, body, application_family, **kwargs):  # noqa: E501
        """upsert_application_family_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_application_family_metadata(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoApplicationFamilyMetadata body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoApplicationFamilyMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_application_family_metadata_with_http_info(body, application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_application_family_metadata_with_http_info(body, application_family, **kwargs)  # noqa: E501
            return data

    def upsert_application_family_metadata_with_http_info(self, body, application_family, **kwargs):  # noqa: E501
        """upsert_application_family_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_application_family_metadata_with_http_info(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoApplicationFamilyMetadata body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoApplicationFamilyMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_application_family_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upsert_application_family_metadata`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `upsert_application_family_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/applicationFamilies/{applicationFamily}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoApplicationFamilyMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_environment(self, body, application_family, **kwargs):  # noqa: E501
        """upsert_environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_environment(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoEnvironment body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoEnvironment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upsert_environment_with_http_info(body, application_family, **kwargs)  # noqa: E501
        else:
            (data) = self.upsert_environment_with_http_info(body, application_family, **kwargs)  # noqa: E501
            return data

    def upsert_environment_with_http_info(self, body, application_family, **kwargs):  # noqa: E501
        """upsert_environment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_environment_with_http_info(body, application_family, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComCapillaryOpsDeployerBoEnvironment body: (required)
        :param str application_family: (required)
        :return: ComCapillaryOpsDeployerBoEnvironment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'application_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upsert_environment`")  # noqa: E501
        # verify the required parameter 'application_family' is set
        if ('application_family' not in params or
                params['application_family'] is None):
            raise ValueError("Missing the required parameter `application_family` when calling `upsert_environment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_family' in params:
            path_params['applicationFamily'] = params['application_family']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/{applicationFamily}/environments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComCapillaryOpsDeployerBoEnvironment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
