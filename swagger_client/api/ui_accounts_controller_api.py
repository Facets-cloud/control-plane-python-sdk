# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiAccountsControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_aws_account_using_post(self, aws_account_request, **kwargs):  # noqa: E501
        """createAwsAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aws_account_using_post(aws_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AwsAccount aws_account_request: awsAccountRequest (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aws_account_using_post_with_http_info(aws_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aws_account_using_post_with_http_info(aws_account_request, **kwargs)  # noqa: E501
            return data

    def create_aws_account_using_post_with_http_info(self, aws_account_request, **kwargs):  # noqa: E501
        """createAwsAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aws_account_using_post_with_http_info(aws_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AwsAccount aws_account_request: awsAccountRequest (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aws_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_account_request' is set
        if self.api_client.client_side_validation and ('aws_account_request' not in params or
                                                       params['aws_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aws_account_request` when calling `create_aws_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_account_request' in params:
            body_params = params['aws_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/aws/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_azure_account_using_post(self, azure_account_request, **kwargs):  # noqa: E501
        """createAzureAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_azure_account_using_post(azure_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureAccount azure_account_request: azureAccountRequest (required)
        :return: AzureAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_azure_account_using_post_with_http_info(azure_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_azure_account_using_post_with_http_info(azure_account_request, **kwargs)  # noqa: E501
            return data

    def create_azure_account_using_post_with_http_info(self, azure_account_request, **kwargs):  # noqa: E501
        """createAzureAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_azure_account_using_post_with_http_info(azure_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureAccount azure_account_request: azureAccountRequest (required)
        :return: AzureAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['azure_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_azure_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'azure_account_request' is set
        if self.api_client.client_side_validation and ('azure_account_request' not in params or
                                                       params['azure_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `azure_account_request` when calling `create_azure_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_account_request' in params:
            body_params = params['azure_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/azure/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bit_bucket_account_using_post(self, bitbucket_account_request, **kwargs):  # noqa: E501
        """createBitBucketAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bit_bucket_account_using_post(bitbucket_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BitBucketAccount bitbucket_account_request: bitbucketAccountRequest (required)
        :return: BitBucketAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bit_bucket_account_using_post_with_http_info(bitbucket_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bit_bucket_account_using_post_with_http_info(bitbucket_account_request, **kwargs)  # noqa: E501
            return data

    def create_bit_bucket_account_using_post_with_http_info(self, bitbucket_account_request, **kwargs):  # noqa: E501
        """createBitBucketAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bit_bucket_account_using_post_with_http_info(bitbucket_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BitBucketAccount bitbucket_account_request: bitbucketAccountRequest (required)
        :return: BitBucketAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bitbucket_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bit_bucket_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bitbucket_account_request' is set
        if self.api_client.client_side_validation and ('bitbucket_account_request' not in params or
                                                       params['bitbucket_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bitbucket_account_request` when calling `create_bit_bucket_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bitbucket_account_request' in params:
            body_params = params['bitbucket_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/bitbucket/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BitBucketAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_coder_account_using_post(self, coder_account_request, **kwargs):  # noqa: E501
        """createCoderAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_coder_account_using_post(coder_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoderAccount coder_account_request: coderAccountRequest (required)
        :return: CoderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_coder_account_using_post_with_http_info(coder_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_coder_account_using_post_with_http_info(coder_account_request, **kwargs)  # noqa: E501
            return data

    def create_coder_account_using_post_with_http_info(self, coder_account_request, **kwargs):  # noqa: E501
        """createCoderAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_coder_account_using_post_with_http_info(coder_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoderAccount coder_account_request: coderAccountRequest (required)
        :return: CoderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coder_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coder_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coder_account_request' is set
        if self.api_client.client_side_validation and ('coder_account_request' not in params or
                                                       params['coder_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coder_account_request` when calling `create_coder_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coder_account_request' in params:
            body_params = params['coder_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/coder/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_gcp_account_using_post(self, gcp_account_request, **kwargs):  # noqa: E501
        """createGcpAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gcp_account_using_post(gcp_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GcpAccount gcp_account_request: gcpAccountRequest (required)
        :return: GcpAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_gcp_account_using_post_with_http_info(gcp_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_gcp_account_using_post_with_http_info(gcp_account_request, **kwargs)  # noqa: E501
            return data

    def create_gcp_account_using_post_with_http_info(self, gcp_account_request, **kwargs):  # noqa: E501
        """createGcpAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gcp_account_using_post_with_http_info(gcp_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GcpAccount gcp_account_request: gcpAccountRequest (required)
        :return: GcpAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gcp_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gcp_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gcp_account_request' is set
        if self.api_client.client_side_validation and ('gcp_account_request' not in params or
                                                       params['gcp_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gcp_account_request` when calling `create_gcp_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gcp_account_request' in params:
            body_params = params['gcp_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/gcp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GcpAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_git_hub_account_using_post(self, github_account_request, **kwargs):  # noqa: E501
        """createGitHubAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_git_hub_account_using_post(github_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitHubAccount github_account_request: githubAccountRequest (required)
        :return: GitHubAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_git_hub_account_using_post_with_http_info(github_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_git_hub_account_using_post_with_http_info(github_account_request, **kwargs)  # noqa: E501
            return data

    def create_git_hub_account_using_post_with_http_info(self, github_account_request, **kwargs):  # noqa: E501
        """createGitHubAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_git_hub_account_using_post_with_http_info(github_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitHubAccount github_account_request: githubAccountRequest (required)
        :return: GitHubAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['github_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_git_hub_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'github_account_request' is set
        if self.api_client.client_side_validation and ('github_account_request' not in params or
                                                       params['github_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `github_account_request` when calling `create_git_hub_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'github_account_request' in params:
            body_params = params['github_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/github/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GitHubAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_git_lab_account_using_post(self, gitlab_account_request, **kwargs):  # noqa: E501
        """createGitLabAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_git_lab_account_using_post(gitlab_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLabAccount gitlab_account_request: gitlabAccountRequest (required)
        :return: GitLabAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_git_lab_account_using_post_with_http_info(gitlab_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_git_lab_account_using_post_with_http_info(gitlab_account_request, **kwargs)  # noqa: E501
            return data

    def create_git_lab_account_using_post_with_http_info(self, gitlab_account_request, **kwargs):  # noqa: E501
        """createGitLabAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_git_lab_account_using_post_with_http_info(gitlab_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLabAccount gitlab_account_request: gitlabAccountRequest (required)
        :return: GitLabAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gitlab_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_git_lab_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gitlab_account_request' is set
        if self.api_client.client_side_validation and ('gitlab_account_request' not in params or
                                                       params['gitlab_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gitlab_account_request` when calling `create_git_lab_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gitlab_account_request' in params:
            body_params = params['gitlab_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/gitlab/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GitLabAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_kubernetes_account_using_post(self, k8s_account_request, **kwargs):  # noqa: E501
        """createKubernetesAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_account_using_post(k8s_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KubernetesAccount k8s_account_request: k8sAccountRequest (required)
        :return: KubernetesAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_kubernetes_account_using_post_with_http_info(k8s_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_kubernetes_account_using_post_with_http_info(k8s_account_request, **kwargs)  # noqa: E501
            return data

    def create_kubernetes_account_using_post_with_http_info(self, k8s_account_request, **kwargs):  # noqa: E501
        """createKubernetesAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_kubernetes_account_using_post_with_http_info(k8s_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KubernetesAccount k8s_account_request: k8sAccountRequest (required)
        :return: KubernetesAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['k8s_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_kubernetes_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'k8s_account_request' is set
        if self.api_client.client_side_validation and ('k8s_account_request' not in params or
                                                       params['k8s_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `k8s_account_request` when calling `create_kubernetes_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'k8s_account_request' in params:
            body_params = params['k8s_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/kubernetes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubernetesAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_account_using_delete(self, id, **kwargs):  # noqa: E501
        """deleteAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_using_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_account_using_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_account_using_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_account_using_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """deleteAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_using_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_account_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_by_name_using_get(self, name, **kwargs):  # noqa: E501
        """getAccountByName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_by_name_using_get(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_by_name_using_get_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_by_name_using_get_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_account_by_name_using_get_with_http_info(self, name, **kwargs):  # noqa: E501
        """getAccountByName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_by_name_using_get_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_by_name_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_account_by_name_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/name/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_using_get(self, id, **kwargs):  # noqa: E501
        """getAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_account_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """getAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_account_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_accounts_by_type_using_get(self, type, **kwargs):  # noqa: E501
        """getAccountsByType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_by_type_using_get(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: type (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts_by_type_using_get_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_by_type_using_get_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_accounts_by_type_using_get_with_http_info(self, type, **kwargs):  # noqa: E501
        """getAccountsByType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_by_type_using_get_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: type (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_by_type_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `get_accounts_by_type_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/type/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_accounts_using_get(self, **kwargs):  # noqa: E501
        """getAllAccounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_accounts_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_accounts_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_accounts_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_accounts_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllAccounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_accounts_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_accounts_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vcs_token_details_using_get(self, **kwargs):  # noqa: E501
        """getAllVCSTokenDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_token_details_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VCSTokenDetailsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vcs_token_details_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vcs_token_details_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_vcs_token_details_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllVCSTokenDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_token_details_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VCSTokenDetailsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vcs_token_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/token-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VCSTokenDetailsResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bitbucket_projects_for_workspace_using_get(self, account_id, workspace, **kwargs):  # noqa: E501
        """getBitbucketProjectsForWorkspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bitbucket_projects_for_workspace_using_get(account_id, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :param str workspace: workspace (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bitbucket_projects_for_workspace_using_get_with_http_info(account_id, workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bitbucket_projects_for_workspace_using_get_with_http_info(account_id, workspace, **kwargs)  # noqa: E501
            return data

    def get_bitbucket_projects_for_workspace_using_get_with_http_info(self, account_id, workspace, **kwargs):  # noqa: E501
        """getBitbucketProjectsForWorkspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bitbucket_projects_for_workspace_using_get_with_http_info(account_id, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :param str workspace: workspace (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bitbucket_projects_for_workspace_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_bitbucket_projects_for_workspace_using_get`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if self.api_client.client_side_validation and ('workspace' not in params or
                                                       params['workspace'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace` when calling `get_bitbucket_projects_for_workspace_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/{accountId}/workspaces/{workspace}/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vcs_organisations_using_post(self, vcs_organizations_request, **kwargs):  # noqa: E501
        """getVCSOrganisations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_organisations_using_post(vcs_organizations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VCSOrganizationsRequest vcs_organizations_request: VCSOrganizationsRequest (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vcs_organisations_using_post_with_http_info(vcs_organizations_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vcs_organisations_using_post_with_http_info(vcs_organizations_request, **kwargs)  # noqa: E501
            return data

    def get_vcs_organisations_using_post_with_http_info(self, vcs_organizations_request, **kwargs):  # noqa: E501
        """getVCSOrganisations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_organisations_using_post_with_http_info(vcs_organizations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VCSOrganizationsRequest vcs_organizations_request: VCSOrganizationsRequest (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_organizations_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_organisations_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_organizations_request' is set
        if self.api_client.client_side_validation and ('vcs_organizations_request' not in params or
                                                       params['vcs_organizations_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vcs_organizations_request` when calling `get_vcs_organisations_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vcs_organizations_request' in params:
            body_params = params['vcs_organizations_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/get-organisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vcs_organizations_by_account_id_using_get(self, account_id, **kwargs):  # noqa: E501
        """getVcsOrganizationsByAccountId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_organizations_by_account_id_using_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vcs_organizations_by_account_id_using_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vcs_organizations_by_account_id_using_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_vcs_organizations_by_account_id_using_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """getVcsOrganizationsByAccountId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_organizations_by_account_id_using_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: accountId (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_organizations_by_account_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_vcs_organizations_by_account_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/vcs-orgs/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vcs_token_details_by_stack_name_using_get(self, stack_name, **kwargs):  # noqa: E501
        """getVCSTokenDetailsByStackName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_token_details_by_stack_name_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: VCSTokenDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vcs_token_details_by_stack_name_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vcs_token_details_by_stack_name_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_vcs_token_details_by_stack_name_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getVCSTokenDetailsByStackName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vcs_token_details_by_stack_name_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: VCSTokenDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vcs_token_details_by_stack_name_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if self.api_client.client_side_validation and ('stack_name' not in params or
                                                       params['stack_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stack_name` when calling `get_vcs_token_details_by_stack_name_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/stack/{stackName}/token-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VCSTokenDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_all_vcs_token_details_using_post(self, **kwargs):  # noqa: E501
        """refreshAllVCSTokenDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_all_vcs_token_details_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_all_vcs_token_details_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.refresh_all_vcs_token_details_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def refresh_all_vcs_token_details_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """refreshAllVCSTokenDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_all_vcs_token_details_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_all_vcs_token_details_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/token-details/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_cloud_account_linking_using_post(self, cloud_linking_request, **kwargs):  # noqa: E501
        """requestCloudAccountLinking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_cloud_account_linking_using_post(cloud_linking_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudLinkingRequest cloud_linking_request: cloudLinkingRequest (required)
        :return: OneTimeWebhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_cloud_account_linking_using_post_with_http_info(cloud_linking_request, **kwargs)  # noqa: E501
        else:
            (data) = self.request_cloud_account_linking_using_post_with_http_info(cloud_linking_request, **kwargs)  # noqa: E501
            return data

    def request_cloud_account_linking_using_post_with_http_info(self, cloud_linking_request, **kwargs):  # noqa: E501
        """requestCloudAccountLinking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_cloud_account_linking_using_post_with_http_info(cloud_linking_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudLinkingRequest cloud_linking_request: cloudLinkingRequest (required)
        :return: OneTimeWebhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_linking_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_cloud_account_linking_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_linking_request' is set
        if self.api_client.client_side_validation and ('cloud_linking_request' not in params or
                                                       params['cloud_linking_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_linking_request` when calling `request_cloud_account_linking_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cloud_linking_request' in params:
            body_params = params['cloud_linking_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/link-cloud', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneTimeWebhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_vcs_linking_using_post(self, vcs_linking_request, **kwargs):  # noqa: E501
        """requestVCSLinking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_vcs_linking_using_post(vcs_linking_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VCSLinkingRequest vcs_linking_request: vcsLinkingRequest (required)
        :return: VCSLinkingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_vcs_linking_using_post_with_http_info(vcs_linking_request, **kwargs)  # noqa: E501
        else:
            (data) = self.request_vcs_linking_using_post_with_http_info(vcs_linking_request, **kwargs)  # noqa: E501
            return data

    def request_vcs_linking_using_post_with_http_info(self, vcs_linking_request, **kwargs):  # noqa: E501
        """requestVCSLinking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_vcs_linking_using_post_with_http_info(vcs_linking_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VCSLinkingRequest vcs_linking_request: vcsLinkingRequest (required)
        :return: VCSLinkingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vcs_linking_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_vcs_linking_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vcs_linking_request' is set
        if self.api_client.client_side_validation and ('vcs_linking_request' not in params or
                                                       params['vcs_linking_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vcs_linking_request` when calling `request_vcs_linking_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vcs_linking_request' in params:
            body_params = params['vcs_linking_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/link-vcs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VCSLinkingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aws_account_using_put(self, aws_account_request, id, **kwargs):  # noqa: E501
        """updateAwsAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aws_account_using_put(aws_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AwsAccount aws_account_request: awsAccountRequest (required)
        :param str id: id (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aws_account_using_put_with_http_info(aws_account_request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aws_account_using_put_with_http_info(aws_account_request, id, **kwargs)  # noqa: E501
            return data

    def update_aws_account_using_put_with_http_info(self, aws_account_request, id, **kwargs):  # noqa: E501
        """updateAwsAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aws_account_using_put_with_http_info(aws_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AwsAccount aws_account_request: awsAccountRequest (required)
        :param str id: id (required)
        :return: AwsAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_account_request', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aws_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_account_request' is set
        if self.api_client.client_side_validation and ('aws_account_request' not in params or
                                                       params['aws_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aws_account_request` when calling `update_aws_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_aws_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_account_request' in params:
            body_params = params['aws_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/aws/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_azure_account_using_put(self, azure_account_request, id, **kwargs):  # noqa: E501
        """updateAzureAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_azure_account_using_put(azure_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureAccount azure_account_request: azureAccountRequest (required)
        :param str id: id (required)
        :return: AzureAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_azure_account_using_put_with_http_info(azure_account_request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_azure_account_using_put_with_http_info(azure_account_request, id, **kwargs)  # noqa: E501
            return data

    def update_azure_account_using_put_with_http_info(self, azure_account_request, id, **kwargs):  # noqa: E501
        """updateAzureAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_azure_account_using_put_with_http_info(azure_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureAccount azure_account_request: azureAccountRequest (required)
        :param str id: id (required)
        :return: AzureAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['azure_account_request', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_azure_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'azure_account_request' is set
        if self.api_client.client_side_validation and ('azure_account_request' not in params or
                                                       params['azure_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `azure_account_request` when calling `update_azure_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_azure_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_account_request' in params:
            body_params = params['azure_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/azure/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AzureAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bit_bucket_account_using_put(self, bitbucket_account_request, id, **kwargs):  # noqa: E501
        """updateBitBucketAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bit_bucket_account_using_put(bitbucket_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BitBucketAccount bitbucket_account_request: bitbucketAccountRequest (required)
        :param str id: id (required)
        :return: BitBucketAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bit_bucket_account_using_put_with_http_info(bitbucket_account_request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bit_bucket_account_using_put_with_http_info(bitbucket_account_request, id, **kwargs)  # noqa: E501
            return data

    def update_bit_bucket_account_using_put_with_http_info(self, bitbucket_account_request, id, **kwargs):  # noqa: E501
        """updateBitBucketAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bit_bucket_account_using_put_with_http_info(bitbucket_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BitBucketAccount bitbucket_account_request: bitbucketAccountRequest (required)
        :param str id: id (required)
        :return: BitBucketAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bitbucket_account_request', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bit_bucket_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bitbucket_account_request' is set
        if self.api_client.client_side_validation and ('bitbucket_account_request' not in params or
                                                       params['bitbucket_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bitbucket_account_request` when calling `update_bit_bucket_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_bit_bucket_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bitbucket_account_request' in params:
            body_params = params['bitbucket_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/bitbucket/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BitBucketAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_coder_account_using_put(self, coder_account, id, **kwargs):  # noqa: E501
        """updateCoderAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_coder_account_using_put(coder_account, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoderAccount coder_account: coderAccount (required)
        :param str id: id (required)
        :return: CoderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_coder_account_using_put_with_http_info(coder_account, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_coder_account_using_put_with_http_info(coder_account, id, **kwargs)  # noqa: E501
            return data

    def update_coder_account_using_put_with_http_info(self, coder_account, id, **kwargs):  # noqa: E501
        """updateCoderAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_coder_account_using_put_with_http_info(coder_account, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoderAccount coder_account: coderAccount (required)
        :param str id: id (required)
        :return: CoderAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coder_account', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_coder_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coder_account' is set
        if self.api_client.client_side_validation and ('coder_account' not in params or
                                                       params['coder_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `coder_account` when calling `update_coder_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_coder_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coder_account' in params:
            body_params = params['coder_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/coder/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_gcp_account_using_put(self, gcp_account_request, id, **kwargs):  # noqa: E501
        """updateGcpAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_gcp_account_using_put(gcp_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GcpAccount gcp_account_request: gcpAccountRequest (required)
        :param str id: id (required)
        :return: GcpAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_gcp_account_using_put_with_http_info(gcp_account_request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_gcp_account_using_put_with_http_info(gcp_account_request, id, **kwargs)  # noqa: E501
            return data

    def update_gcp_account_using_put_with_http_info(self, gcp_account_request, id, **kwargs):  # noqa: E501
        """updateGcpAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_gcp_account_using_put_with_http_info(gcp_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GcpAccount gcp_account_request: gcpAccountRequest (required)
        :param str id: id (required)
        :return: GcpAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gcp_account_request', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_gcp_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gcp_account_request' is set
        if self.api_client.client_side_validation and ('gcp_account_request' not in params or
                                                       params['gcp_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gcp_account_request` when calling `update_gcp_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_gcp_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gcp_account_request' in params:
            body_params = params['gcp_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/gcp/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GcpAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_git_hub_account_using_put(self, github_account_request, id, **kwargs):  # noqa: E501
        """updateGitHubAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_git_hub_account_using_put(github_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitHubAccount github_account_request: githubAccountRequest (required)
        :param str id: id (required)
        :return: GitHubAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_git_hub_account_using_put_with_http_info(github_account_request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_git_hub_account_using_put_with_http_info(github_account_request, id, **kwargs)  # noqa: E501
            return data

    def update_git_hub_account_using_put_with_http_info(self, github_account_request, id, **kwargs):  # noqa: E501
        """updateGitHubAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_git_hub_account_using_put_with_http_info(github_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitHubAccount github_account_request: githubAccountRequest (required)
        :param str id: id (required)
        :return: GitHubAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['github_account_request', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_git_hub_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'github_account_request' is set
        if self.api_client.client_side_validation and ('github_account_request' not in params or
                                                       params['github_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `github_account_request` when calling `update_git_hub_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_git_hub_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'github_account_request' in params:
            body_params = params['github_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/github/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GitHubAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_git_lab_account_using_put(self, gitlab_account_request, id, **kwargs):  # noqa: E501
        """updateGitLabAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_git_lab_account_using_put(gitlab_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLabAccount gitlab_account_request: gitlabAccountRequest (required)
        :param str id: id (required)
        :return: GitLabAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_git_lab_account_using_put_with_http_info(gitlab_account_request, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_git_lab_account_using_put_with_http_info(gitlab_account_request, id, **kwargs)  # noqa: E501
            return data

    def update_git_lab_account_using_put_with_http_info(self, gitlab_account_request, id, **kwargs):  # noqa: E501
        """updateGitLabAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_git_lab_account_using_put_with_http_info(gitlab_account_request, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLabAccount gitlab_account_request: gitlabAccountRequest (required)
        :param str id: id (required)
        :return: GitLabAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gitlab_account_request', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_git_lab_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gitlab_account_request' is set
        if self.api_client.client_side_validation and ('gitlab_account_request' not in params or
                                                       params['gitlab_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gitlab_account_request` when calling `update_git_lab_account_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_git_lab_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gitlab_account_request' in params:
            body_params = params['gitlab_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/gitlab/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GitLabAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kubernetes_account_using_put(self, id, k8s_account_request, **kwargs):  # noqa: E501
        """updateKubernetesAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_account_using_put(id, k8s_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param KubernetesAccount k8s_account_request: k8sAccountRequest (required)
        :return: KubernetesAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kubernetes_account_using_put_with_http_info(id, k8s_account_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kubernetes_account_using_put_with_http_info(id, k8s_account_request, **kwargs)  # noqa: E501
            return data

    def update_kubernetes_account_using_put_with_http_info(self, id, k8s_account_request, **kwargs):  # noqa: E501
        """updateKubernetesAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kubernetes_account_using_put_with_http_info(id, k8s_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param KubernetesAccount k8s_account_request: k8sAccountRequest (required)
        :return: KubernetesAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'k8s_account_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kubernetes_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_kubernetes_account_using_put`")  # noqa: E501
        # verify the required parameter 'k8s_account_request' is set
        if self.api_client.client_side_validation and ('k8s_account_request' not in params or
                                                       params['k8s_account_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `k8s_account_request` when calling `update_kubernetes_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'k8s_account_request' in params:
            body_params = params['k8s_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/kubernetes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KubernetesAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vcs_account_using_patch(self, id, vcs_account_update_request, **kwargs):  # noqa: E501
        """updateVCSAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vcs_account_using_patch(id, vcs_account_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param VCSAccountUpdateRequest vcs_account_update_request: vcsAccountUpdateRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vcs_account_using_patch_with_http_info(id, vcs_account_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vcs_account_using_patch_with_http_info(id, vcs_account_update_request, **kwargs)  # noqa: E501
            return data

    def update_vcs_account_using_patch_with_http_info(self, id, vcs_account_update_request, **kwargs):  # noqa: E501
        """updateVCSAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vcs_account_using_patch_with_http_info(id, vcs_account_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param VCSAccountUpdateRequest vcs_account_update_request: vcsAccountUpdateRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vcs_account_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vcs_account_using_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_vcs_account_using_patch`")  # noqa: E501
        # verify the required parameter 'vcs_account_update_request' is set
        if self.api_client.client_side_validation and ('vcs_account_update_request' not in params or
                                                       params['vcs_account_update_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vcs_account_update_request` when calling `update_vcs_account_using_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vcs_account_update_request' in params:
            body_params = params['vcs_account_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/vcs/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_aws_account_using_post(self, aws_account, **kwargs):  # noqa: E501
        """validateAwsAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_aws_account_using_post(aws_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AwsAccount aws_account: awsAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_aws_account_using_post_with_http_info(aws_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_aws_account_using_post_with_http_info(aws_account, **kwargs)  # noqa: E501
            return data

    def validate_aws_account_using_post_with_http_info(self, aws_account, **kwargs):  # noqa: E501
        """validateAwsAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_aws_account_using_post_with_http_info(aws_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AwsAccount aws_account: awsAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aws_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_aws_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aws_account' is set
        if self.api_client.client_side_validation and ('aws_account' not in params or
                                                       params['aws_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aws_account` when calling `validate_aws_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aws_account' in params:
            body_params = params['aws_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/aws/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_azure_account_using_post(self, azure_account, **kwargs):  # noqa: E501
        """validateAzureAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_azure_account_using_post(azure_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureAccount azure_account: azureAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_azure_account_using_post_with_http_info(azure_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_azure_account_using_post_with_http_info(azure_account, **kwargs)  # noqa: E501
            return data

    def validate_azure_account_using_post_with_http_info(self, azure_account, **kwargs):  # noqa: E501
        """validateAzureAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_azure_account_using_post_with_http_info(azure_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AzureAccount azure_account: azureAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['azure_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_azure_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'azure_account' is set
        if self.api_client.client_side_validation and ('azure_account' not in params or
                                                       params['azure_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `azure_account` when calling `validate_azure_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'azure_account' in params:
            body_params = params['azure_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/azure/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_bitbucket_account_using_post(self, bit_bucket_account, **kwargs):  # noqa: E501
        """validateBitbucketAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_bitbucket_account_using_post(bit_bucket_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BitBucketAccount bit_bucket_account: bitBucketAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_bitbucket_account_using_post_with_http_info(bit_bucket_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_bitbucket_account_using_post_with_http_info(bit_bucket_account, **kwargs)  # noqa: E501
            return data

    def validate_bitbucket_account_using_post_with_http_info(self, bit_bucket_account, **kwargs):  # noqa: E501
        """validateBitbucketAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_bitbucket_account_using_post_with_http_info(bit_bucket_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BitBucketAccount bit_bucket_account: bitBucketAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bit_bucket_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_bitbucket_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bit_bucket_account' is set
        if self.api_client.client_side_validation and ('bit_bucket_account' not in params or
                                                       params['bit_bucket_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bit_bucket_account` when calling `validate_bitbucket_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bit_bucket_account' in params:
            body_params = params['bit_bucket_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/bitbucket/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_gcp_account_using_post(self, gcp_account, **kwargs):  # noqa: E501
        """validateGcpAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_gcp_account_using_post(gcp_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GcpAccount gcp_account: gcpAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_gcp_account_using_post_with_http_info(gcp_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_gcp_account_using_post_with_http_info(gcp_account, **kwargs)  # noqa: E501
            return data

    def validate_gcp_account_using_post_with_http_info(self, gcp_account, **kwargs):  # noqa: E501
        """validateGcpAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_gcp_account_using_post_with_http_info(gcp_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GcpAccount gcp_account: gcpAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gcp_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_gcp_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gcp_account' is set
        if self.api_client.client_side_validation and ('gcp_account' not in params or
                                                       params['gcp_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gcp_account` when calling `validate_gcp_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gcp_account' in params:
            body_params = params['gcp_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/gcp/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_github_account_using_post(self, git_hub_account, **kwargs):  # noqa: E501
        """validateGithubAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_github_account_using_post(git_hub_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitHubAccount git_hub_account: gitHubAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_github_account_using_post_with_http_info(git_hub_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_github_account_using_post_with_http_info(git_hub_account, **kwargs)  # noqa: E501
            return data

    def validate_github_account_using_post_with_http_info(self, git_hub_account, **kwargs):  # noqa: E501
        """validateGithubAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_github_account_using_post_with_http_info(git_hub_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitHubAccount git_hub_account: gitHubAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['git_hub_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_github_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'git_hub_account' is set
        if self.api_client.client_side_validation and ('git_hub_account' not in params or
                                                       params['git_hub_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `git_hub_account` when calling `validate_github_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'git_hub_account' in params:
            body_params = params['git_hub_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/github/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_gitlab_account_using_post(self, git_lab_account, **kwargs):  # noqa: E501
        """validateGitlabAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_gitlab_account_using_post(git_lab_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLabAccount git_lab_account: gitLabAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_gitlab_account_using_post_with_http_info(git_lab_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_gitlab_account_using_post_with_http_info(git_lab_account, **kwargs)  # noqa: E501
            return data

    def validate_gitlab_account_using_post_with_http_info(self, git_lab_account, **kwargs):  # noqa: E501
        """validateGitlabAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_gitlab_account_using_post_with_http_info(git_lab_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLabAccount git_lab_account: gitLabAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['git_lab_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_gitlab_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'git_lab_account' is set
        if self.api_client.client_side_validation and ('git_lab_account' not in params or
                                                       params['git_lab_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `git_lab_account` when calling `validate_gitlab_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'git_lab_account' in params:
            body_params = params['git_lab_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/gitlab/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_kubernetes_account_using_post(self, kubernetes_account, **kwargs):  # noqa: E501
        """validateKubernetesAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_kubernetes_account_using_post(kubernetes_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KubernetesAccount kubernetes_account: kubernetesAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_kubernetes_account_using_post_with_http_info(kubernetes_account, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_kubernetes_account_using_post_with_http_info(kubernetes_account, **kwargs)  # noqa: E501
            return data

    def validate_kubernetes_account_using_post_with_http_info(self, kubernetes_account, **kwargs):  # noqa: E501
        """validateKubernetesAccount  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_kubernetes_account_using_post_with_http_info(kubernetes_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KubernetesAccount kubernetes_account: kubernetesAccount (required)
        :return: Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kubernetes_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_kubernetes_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kubernetes_account' is set
        if self.api_client.client_side_validation and ('kubernetes_account' not in params or
                                                       params['kubernetes_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kubernetes_account` when calling `validate_kubernetes_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'kubernetes_account' in params:
            body_params = params['kubernetes_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/accounts/kubernetes/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
