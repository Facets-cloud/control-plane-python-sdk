# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsCpBoAlertManagerPayloadResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'group_key': 'str',
        'truncated_alerts': 'int',
        'status': 'str',
        'receiver': 'str',
        'group_labels': 'dict(str, str)',
        'external_url': 'str',
        'alerts': 'list[ComCapillaryOpsCpBoAlertManagerPayloadAlert]'
    }

    attribute_map = {
        'version': 'version',
        'group_key': 'groupKey',
        'truncated_alerts': 'truncatedAlerts',
        'status': 'status',
        'receiver': 'receiver',
        'group_labels': 'groupLabels',
        'external_url': 'externalURL',
        'alerts': 'alerts'
    }

    def __init__(self, version=None, group_key=None, truncated_alerts=None, status=None, receiver=None, group_labels=None, external_url=None, alerts=None):  # noqa: E501
        """ComCapillaryOpsCpBoAlertManagerPayloadResponse - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._group_key = None
        self._truncated_alerts = None
        self._status = None
        self._receiver = None
        self._group_labels = None
        self._external_url = None
        self._alerts = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if group_key is not None:
            self.group_key = group_key
        if truncated_alerts is not None:
            self.truncated_alerts = truncated_alerts
        if status is not None:
            self.status = status
        if receiver is not None:
            self.receiver = receiver
        if group_labels is not None:
            self.group_labels = group_labels
        if external_url is not None:
            self.external_url = external_url
        if alerts is not None:
            self.alerts = alerts

    @property
    def version(self):
        """Gets the version of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The version of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param version: The version of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def group_key(self):
        """Gets the group_key of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The group_key of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param group_key: The group_key of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: str
        """

        self._group_key = group_key

    @property
    def truncated_alerts(self):
        """Gets the truncated_alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The truncated_alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: int
        """
        return self._truncated_alerts

    @truncated_alerts.setter
    def truncated_alerts(self, truncated_alerts):
        """Sets the truncated_alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param truncated_alerts: The truncated_alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: int
        """

        self._truncated_alerts = truncated_alerts

    @property
    def status(self):
        """Gets the status of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The status of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param status: The status of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def receiver(self):
        """Gets the receiver of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The receiver of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param receiver: The receiver of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: str
        """

        self._receiver = receiver

    @property
    def group_labels(self):
        """Gets the group_labels of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The group_labels of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._group_labels

    @group_labels.setter
    def group_labels(self, group_labels):
        """Sets the group_labels of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param group_labels: The group_labels of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._group_labels = group_labels

    @property
    def external_url(self):
        """Gets the external_url of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The external_url of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param external_url: The external_url of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def alerts(self):
        """Gets the alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501


        :return: The alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :rtype: list[ComCapillaryOpsCpBoAlertManagerPayloadAlert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.


        :param alerts: The alerts of this ComCapillaryOpsCpBoAlertManagerPayloadResponse.  # noqa: E501
        :type: list[ComCapillaryOpsCpBoAlertManagerPayloadAlert]
        """

        self._alerts = alerts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsCpBoAlertManagerPayloadResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsCpBoAlertManagerPayloadResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
