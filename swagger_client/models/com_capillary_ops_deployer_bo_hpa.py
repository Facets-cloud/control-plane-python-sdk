# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsDeployerBoHPA(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric_name': 'str',
        'threshold': 'int',
        'min_replicas': 'int',
        'max_replicas': 'int'
    }

    attribute_map = {
        'metric_name': 'metricName',
        'threshold': 'threshold',
        'min_replicas': 'minReplicas',
        'max_replicas': 'maxReplicas'
    }

    def __init__(self, metric_name=None, threshold=None, min_replicas=None, max_replicas=None):  # noqa: E501
        """ComCapillaryOpsDeployerBoHPA - a model defined in Swagger"""  # noqa: E501
        self._metric_name = None
        self._threshold = None
        self._min_replicas = None
        self._max_replicas = None
        self.discriminator = None
        if metric_name is not None:
            self.metric_name = metric_name
        if threshold is not None:
            self.threshold = threshold
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if max_replicas is not None:
            self.max_replicas = max_replicas

    @property
    def metric_name(self):
        """Gets the metric_name of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501


        :return: The metric_name of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ComCapillaryOpsDeployerBoHPA.


        :param metric_name: The metric_name of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :type: str
        """

        self._metric_name = metric_name

    @property
    def threshold(self):
        """Gets the threshold of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501


        :return: The threshold of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ComCapillaryOpsDeployerBoHPA.


        :param threshold: The threshold of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    @property
    def min_replicas(self):
        """Gets the min_replicas of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501


        :return: The min_replicas of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this ComCapillaryOpsDeployerBoHPA.


        :param min_replicas: The min_replicas of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :type: int
        """

        self._min_replicas = min_replicas

    @property
    def max_replicas(self):
        """Gets the max_replicas of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501


        :return: The max_replicas of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this ComCapillaryOpsDeployerBoHPA.


        :param max_replicas: The max_replicas of this ComCapillaryOpsDeployerBoHPA.  # noqa: E501
        :type: int
        """

        self._max_replicas = max_replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsDeployerBoHPA, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsDeployerBoHPA):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
