# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsDeployerBoApplicationMetricsWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application': 'ComCapillaryOpsDeployerBoApplication',
        'recent_metrics': 'ComCapillaryOpsDeployerBoApplicationMetrics',
        'last_week_metrics': 'ComCapillaryOpsDeployerBoApplicationMetrics'
    }

    attribute_map = {
        'application': 'application',
        'recent_metrics': 'recentMetrics',
        'last_week_metrics': 'lastWeekMetrics'
    }

    def __init__(self, application=None, recent_metrics=None, last_week_metrics=None):  # noqa: E501
        """ComCapillaryOpsDeployerBoApplicationMetricsWrapper - a model defined in Swagger"""  # noqa: E501
        self._application = None
        self._recent_metrics = None
        self._last_week_metrics = None
        self.discriminator = None
        if application is not None:
            self.application = application
        if recent_metrics is not None:
            self.recent_metrics = recent_metrics
        if last_week_metrics is not None:
            self.last_week_metrics = last_week_metrics

    @property
    def application(self):
        """Gets the application of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501


        :return: The application of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoApplication
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.


        :param application: The application of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoApplication
        """

        self._application = application

    @property
    def recent_metrics(self):
        """Gets the recent_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501


        :return: The recent_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoApplicationMetrics
        """
        return self._recent_metrics

    @recent_metrics.setter
    def recent_metrics(self, recent_metrics):
        """Sets the recent_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.


        :param recent_metrics: The recent_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoApplicationMetrics
        """

        self._recent_metrics = recent_metrics

    @property
    def last_week_metrics(self):
        """Gets the last_week_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501


        :return: The last_week_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoApplicationMetrics
        """
        return self._last_week_metrics

    @last_week_metrics.setter
    def last_week_metrics(self, last_week_metrics):
        """Sets the last_week_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.


        :param last_week_metrics: The last_week_metrics of this ComCapillaryOpsDeployerBoApplicationMetricsWrapper.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoApplicationMetrics
        """

        self._last_week_metrics = last_week_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsDeployerBoApplicationMetricsWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsDeployerBoApplicationMetricsWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
