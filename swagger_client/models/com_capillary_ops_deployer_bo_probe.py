# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsDeployerBoProbe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port': 'int',
        'initial_delay_seconds': 'int',
        'period_seconds': 'int',
        'http_check_endpoint': 'str',
        'success_threshold': 'int',
        'failure_threshold': 'int',
        'timeout': 'int'
    }

    attribute_map = {
        'port': 'port',
        'initial_delay_seconds': 'initialDelaySeconds',
        'period_seconds': 'periodSeconds',
        'http_check_endpoint': 'httpCheckEndpoint',
        'success_threshold': 'successThreshold',
        'failure_threshold': 'failureThreshold',
        'timeout': 'timeout'
    }

    def __init__(self, port=None, initial_delay_seconds=None, period_seconds=None, http_check_endpoint=None, success_threshold=None, failure_threshold=None, timeout=None):  # noqa: E501
        """ComCapillaryOpsDeployerBoProbe - a model defined in Swagger"""  # noqa: E501
        self._port = None
        self._initial_delay_seconds = None
        self._period_seconds = None
        self._http_check_endpoint = None
        self._success_threshold = None
        self._failure_threshold = None
        self._timeout = None
        self.discriminator = None
        if port is not None:
            self.port = port
        if initial_delay_seconds is not None:
            self.initial_delay_seconds = initial_delay_seconds
        if period_seconds is not None:
            self.period_seconds = period_seconds
        if http_check_endpoint is not None:
            self.http_check_endpoint = http_check_endpoint
        if success_threshold is not None:
            self.success_threshold = success_threshold
        if failure_threshold is not None:
            self.failure_threshold = failure_threshold
        if timeout is not None:
            self.timeout = timeout

    @property
    def port(self):
        """Gets the port of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The port of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ComCapillaryOpsDeployerBoProbe.


        :param port: The port of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def initial_delay_seconds(self):
        """Gets the initial_delay_seconds of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The initial_delay_seconds of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: int
        """
        return self._initial_delay_seconds

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, initial_delay_seconds):
        """Sets the initial_delay_seconds of this ComCapillaryOpsDeployerBoProbe.


        :param initial_delay_seconds: The initial_delay_seconds of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: int
        """

        self._initial_delay_seconds = initial_delay_seconds

    @property
    def period_seconds(self):
        """Gets the period_seconds of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The period_seconds of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: int
        """
        return self._period_seconds

    @period_seconds.setter
    def period_seconds(self, period_seconds):
        """Sets the period_seconds of this ComCapillaryOpsDeployerBoProbe.


        :param period_seconds: The period_seconds of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: int
        """

        self._period_seconds = period_seconds

    @property
    def http_check_endpoint(self):
        """Gets the http_check_endpoint of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The http_check_endpoint of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: str
        """
        return self._http_check_endpoint

    @http_check_endpoint.setter
    def http_check_endpoint(self, http_check_endpoint):
        """Sets the http_check_endpoint of this ComCapillaryOpsDeployerBoProbe.


        :param http_check_endpoint: The http_check_endpoint of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: str
        """

        self._http_check_endpoint = http_check_endpoint

    @property
    def success_threshold(self):
        """Gets the success_threshold of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The success_threshold of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: int
        """
        return self._success_threshold

    @success_threshold.setter
    def success_threshold(self, success_threshold):
        """Sets the success_threshold of this ComCapillaryOpsDeployerBoProbe.


        :param success_threshold: The success_threshold of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: int
        """

        self._success_threshold = success_threshold

    @property
    def failure_threshold(self):
        """Gets the failure_threshold of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The failure_threshold of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: int
        """
        return self._failure_threshold

    @failure_threshold.setter
    def failure_threshold(self, failure_threshold):
        """Sets the failure_threshold of this ComCapillaryOpsDeployerBoProbe.


        :param failure_threshold: The failure_threshold of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: int
        """

        self._failure_threshold = failure_threshold

    @property
    def timeout(self):
        """Gets the timeout of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501


        :return: The timeout of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ComCapillaryOpsDeployerBoProbe.


        :param timeout: The timeout of this ComCapillaryOpsDeployerBoProbe.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsDeployerBoProbe, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsDeployerBoProbe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
