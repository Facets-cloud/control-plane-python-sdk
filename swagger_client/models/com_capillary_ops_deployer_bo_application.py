# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsDeployerBoApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'application_type': 'str',
        'name': 'str',
        'vcs_provider': 'str',
        'repository_url': 'str',
        'repository_default_branch': 'str',
        'application_root_directory': 'str',
        'ports': 'list[ComCapillaryOpsDeployerBoPort]',
        'load_balancer_type': 'str',
        'pvc_list': 'list[ComCapillaryOpsDeployerBoPVC]',
        'build_type': 'str',
        'application_family': 'str',
        'dns_prefix': 'str',
        'health_check': 'ComCapillaryOpsDeployerBoHealthCheck',
        'dns_type': 'str',
        'common_configs': 'dict(str, str)',
        'ci_enabled': 'bool',
        'webhook_id': 'str',
        'deployment_strategy': 'str',
        'elb_idle_timeout_seconds': 'int',
        'strict_git_flow_mode_enabled': 'bool',
        'status_callback_url': 'str',
        'new_relic_alert_recipients': 'str',
        'tag_build_repository_ids': 'list[str]',
        'branch_build_repository_ids': 'list[str]',
        'resource_allocation_strategy': 'str',
        'status_callback_urls': 'list[str]',
        'sonar_branch_wise_analysis_supported': 'bool',
        'sonar_project_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'application_type': 'applicationType',
        'name': 'name',
        'vcs_provider': 'vcsProvider',
        'repository_url': 'repositoryUrl',
        'repository_default_branch': 'repositoryDefaultBranch',
        'application_root_directory': 'applicationRootDirectory',
        'ports': 'ports',
        'load_balancer_type': 'loadBalancerType',
        'pvc_list': 'pvcList',
        'build_type': 'buildType',
        'application_family': 'applicationFamily',
        'dns_prefix': 'dnsPrefix',
        'health_check': 'healthCheck',
        'dns_type': 'dnsType',
        'common_configs': 'commonConfigs',
        'ci_enabled': 'ciEnabled',
        'webhook_id': 'webhookId',
        'deployment_strategy': 'deploymentStrategy',
        'elb_idle_timeout_seconds': 'elbIdleTimeoutSeconds',
        'strict_git_flow_mode_enabled': 'strictGitFlowModeEnabled',
        'status_callback_url': 'statusCallbackUrl',
        'new_relic_alert_recipients': 'newRelicAlertRecipients',
        'tag_build_repository_ids': 'tagBuildRepositoryIds',
        'branch_build_repository_ids': 'branchBuildRepositoryIds',
        'resource_allocation_strategy': 'resourceAllocationStrategy',
        'status_callback_urls': 'statusCallbackUrls',
        'sonar_branch_wise_analysis_supported': 'sonarBranchWiseAnalysisSupported',
        'sonar_project_key': 'sonarProjectKey'
    }

    def __init__(self, id=None, application_type=None, name=None, vcs_provider=None, repository_url=None, repository_default_branch=None, application_root_directory=None, ports=None, load_balancer_type=None, pvc_list=None, build_type=None, application_family=None, dns_prefix=None, health_check=None, dns_type=None, common_configs=None, ci_enabled=None, webhook_id=None, deployment_strategy=None, elb_idle_timeout_seconds=None, strict_git_flow_mode_enabled=None, status_callback_url=None, new_relic_alert_recipients=None, tag_build_repository_ids=None, branch_build_repository_ids=None, resource_allocation_strategy=None, status_callback_urls=None, sonar_branch_wise_analysis_supported=None, sonar_project_key=None):  # noqa: E501
        """ComCapillaryOpsDeployerBoApplication - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._application_type = None
        self._name = None
        self._vcs_provider = None
        self._repository_url = None
        self._repository_default_branch = None
        self._application_root_directory = None
        self._ports = None
        self._load_balancer_type = None
        self._pvc_list = None
        self._build_type = None
        self._application_family = None
        self._dns_prefix = None
        self._health_check = None
        self._dns_type = None
        self._common_configs = None
        self._ci_enabled = None
        self._webhook_id = None
        self._deployment_strategy = None
        self._elb_idle_timeout_seconds = None
        self._strict_git_flow_mode_enabled = None
        self._status_callback_url = None
        self._new_relic_alert_recipients = None
        self._tag_build_repository_ids = None
        self._branch_build_repository_ids = None
        self._resource_allocation_strategy = None
        self._status_callback_urls = None
        self._sonar_branch_wise_analysis_supported = None
        self._sonar_project_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if application_type is not None:
            self.application_type = application_type
        if name is not None:
            self.name = name
        self.vcs_provider = vcs_provider
        self.repository_url = repository_url
        if repository_default_branch is not None:
            self.repository_default_branch = repository_default_branch
        self.application_root_directory = application_root_directory
        self.ports = ports
        if load_balancer_type is not None:
            self.load_balancer_type = load_balancer_type
        if pvc_list is not None:
            self.pvc_list = pvc_list
        self.build_type = build_type
        self.application_family = application_family
        if dns_prefix is not None:
            self.dns_prefix = dns_prefix
        if health_check is not None:
            self.health_check = health_check
        if dns_type is not None:
            self.dns_type = dns_type
        if common_configs is not None:
            self.common_configs = common_configs
        if ci_enabled is not None:
            self.ci_enabled = ci_enabled
        if webhook_id is not None:
            self.webhook_id = webhook_id
        if deployment_strategy is not None:
            self.deployment_strategy = deployment_strategy
        if elb_idle_timeout_seconds is not None:
            self.elb_idle_timeout_seconds = elb_idle_timeout_seconds
        if strict_git_flow_mode_enabled is not None:
            self.strict_git_flow_mode_enabled = strict_git_flow_mode_enabled
        if status_callback_url is not None:
            self.status_callback_url = status_callback_url
        if new_relic_alert_recipients is not None:
            self.new_relic_alert_recipients = new_relic_alert_recipients
        if tag_build_repository_ids is not None:
            self.tag_build_repository_ids = tag_build_repository_ids
        if branch_build_repository_ids is not None:
            self.branch_build_repository_ids = branch_build_repository_ids
        if resource_allocation_strategy is not None:
            self.resource_allocation_strategy = resource_allocation_strategy
        if status_callback_urls is not None:
            self.status_callback_urls = status_callback_urls
        if sonar_branch_wise_analysis_supported is not None:
            self.sonar_branch_wise_analysis_supported = sonar_branch_wise_analysis_supported
        if sonar_project_key is not None:
            self.sonar_project_key = sonar_project_key

    @property
    def id(self):
        """Gets the id of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The id of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComCapillaryOpsDeployerBoApplication.


        :param id: The id of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def application_type(self):
        """Gets the application_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The application_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this ComCapillaryOpsDeployerBoApplication.


        :param application_type: The application_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVICE", "SCHEDULED_JOB", "STATEFUL_SET", "SERVERLESS"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"  # noqa: E501
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def name(self):
        """Gets the name of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The name of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComCapillaryOpsDeployerBoApplication.


        :param name: The name of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vcs_provider(self):
        """Gets the vcs_provider of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The vcs_provider of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._vcs_provider

    @vcs_provider.setter
    def vcs_provider(self, vcs_provider):
        """Sets the vcs_provider of this ComCapillaryOpsDeployerBoApplication.


        :param vcs_provider: The vcs_provider of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        if vcs_provider is None:
            raise ValueError("Invalid value for `vcs_provider`, must not be `None`")  # noqa: E501
        allowed_values = ["BITBUCKET", "GITHUB"]  # noqa: E501
        if vcs_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `vcs_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(vcs_provider, allowed_values)
            )

        self._vcs_provider = vcs_provider

    @property
    def repository_url(self):
        """Gets the repository_url of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The repository_url of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this ComCapillaryOpsDeployerBoApplication.


        :param repository_url: The repository_url of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")  # noqa: E501

        self._repository_url = repository_url

    @property
    def repository_default_branch(self):
        """Gets the repository_default_branch of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The repository_default_branch of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._repository_default_branch

    @repository_default_branch.setter
    def repository_default_branch(self, repository_default_branch):
        """Sets the repository_default_branch of this ComCapillaryOpsDeployerBoApplication.


        :param repository_default_branch: The repository_default_branch of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._repository_default_branch = repository_default_branch

    @property
    def application_root_directory(self):
        """Gets the application_root_directory of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The application_root_directory of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._application_root_directory

    @application_root_directory.setter
    def application_root_directory(self, application_root_directory):
        """Sets the application_root_directory of this ComCapillaryOpsDeployerBoApplication.


        :param application_root_directory: The application_root_directory of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        if application_root_directory is None:
            raise ValueError("Invalid value for `application_root_directory`, must not be `None`")  # noqa: E501

        self._application_root_directory = application_root_directory

    @property
    def ports(self):
        """Gets the ports of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The ports of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: list[ComCapillaryOpsDeployerBoPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ComCapillaryOpsDeployerBoApplication.


        :param ports: The ports of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: list[ComCapillaryOpsDeployerBoPort]
        """
        if ports is None:
            raise ValueError("Invalid value for `ports`, must not be `None`")  # noqa: E501

        self._ports = ports

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The load_balancer_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this ComCapillaryOpsDeployerBoApplication.


        :param load_balancer_type: The load_balancer_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL", "EXTERNAL", "NONE"]  # noqa: E501
        if load_balancer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(load_balancer_type, allowed_values)
            )

        self._load_balancer_type = load_balancer_type

    @property
    def pvc_list(self):
        """Gets the pvc_list of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The pvc_list of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: list[ComCapillaryOpsDeployerBoPVC]
        """
        return self._pvc_list

    @pvc_list.setter
    def pvc_list(self, pvc_list):
        """Sets the pvc_list of this ComCapillaryOpsDeployerBoApplication.


        :param pvc_list: The pvc_list of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: list[ComCapillaryOpsDeployerBoPVC]
        """

        self._pvc_list = pvc_list

    @property
    def build_type(self):
        """Gets the build_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The build_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this ComCapillaryOpsDeployerBoApplication.


        :param build_type: The build_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        if build_type is None:
            raise ValueError("Invalid value for `build_type`, must not be `None`")  # noqa: E501
        allowed_values = ["MVN", "MVN_SONAR_BRANCH", "MVN_SONAR_BRANCH_UT_STRICT", "JDK11_MAVEN3", "JDK11_MVN3_SONAR_BRANCH", "JDK17_MVN3_SONAR_BRANCH", "JDK17_MVN3_SONAR_BRANCH_OVERLAY2", "JDK17_MVN3_LIBRARY_SONAR_BRANCH", "JAVA8_LIBRARY", "JAVA8_LIBRARY_SONAR_BRANCH", "FREESTYLE_DOCKER", "DOTNET_CORE", "MVN_IONIC", "MVN_IONIC_SONAR_BRANCH", "JDK6_MAVEN2", "MJ_NUGET", "DOTNET_CORE22", "DOTNET_CORE3", "SBT", "NPM", "NPM_SONAR_BRANCH", "NPM_LTS_V18_SONAR_BRANCH", "NPM_UI", "NPM_UI_SONAR_BRANCH", "NPM_UI_V14_SONAR_BRANCH", "THRIFT8_LIBRARY", "THRIFT9_LIBRARY", "THRIFT8_WITH_FLAGS_LIBRARY", "SCALA_LIBRARY", "CHEETAH_LIBRARY", "SHARINGAN_LIBRARY", "NPM_LTS_V20_SONAR_BRANCH", "JDK11_MVN3_LIBRARY_SONAR_BRANCH", "JDK21_MVN3_LIBRARY_SONAR_BRANCH", "JDK21_MVN3_SONAR_BRANCH"]  # noqa: E501
        if build_type not in allowed_values:
            raise ValueError(
                "Invalid value for `build_type` ({0}), must be one of {1}"  # noqa: E501
                .format(build_type, allowed_values)
            )

        self._build_type = build_type

    @property
    def application_family(self):
        """Gets the application_family of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The application_family of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this ComCapillaryOpsDeployerBoApplication.


        :param application_family: The application_family of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        if application_family is None:
            raise ValueError("Invalid value for `application_family`, must not be `None`")  # noqa: E501
        allowed_values = ["CRM", "ECOMMERCE", "INTEGRATIONS", "OPS"]  # noqa: E501
        if application_family not in allowed_values:
            raise ValueError(
                "Invalid value for `application_family` ({0}), must be one of {1}"  # noqa: E501
                .format(application_family, allowed_values)
            )

        self._application_family = application_family

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The dns_prefix of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this ComCapillaryOpsDeployerBoApplication.


        :param dns_prefix: The dns_prefix of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._dns_prefix = dns_prefix

    @property
    def health_check(self):
        """Gets the health_check of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The health_check of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoHealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this ComCapillaryOpsDeployerBoApplication.


        :param health_check: The health_check of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoHealthCheck
        """

        self._health_check = health_check

    @property
    def dns_type(self):
        """Gets the dns_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The dns_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._dns_type

    @dns_type.setter
    def dns_type(self, dns_type):
        """Sets the dns_type of this ComCapillaryOpsDeployerBoApplication.


        :param dns_type: The dns_type of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUBLIC", "PRIVATE"]  # noqa: E501
        if dns_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dns_type` ({0}), must be one of {1}"  # noqa: E501
                .format(dns_type, allowed_values)
            )

        self._dns_type = dns_type

    @property
    def common_configs(self):
        """Gets the common_configs of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The common_configs of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._common_configs

    @common_configs.setter
    def common_configs(self, common_configs):
        """Sets the common_configs of this ComCapillaryOpsDeployerBoApplication.


        :param common_configs: The common_configs of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: dict(str, str)
        """

        self._common_configs = common_configs

    @property
    def ci_enabled(self):
        """Gets the ci_enabled of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The ci_enabled of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: bool
        """
        return self._ci_enabled

    @ci_enabled.setter
    def ci_enabled(self, ci_enabled):
        """Sets the ci_enabled of this ComCapillaryOpsDeployerBoApplication.


        :param ci_enabled: The ci_enabled of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: bool
        """

        self._ci_enabled = ci_enabled

    @property
    def webhook_id(self):
        """Gets the webhook_id of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The webhook_id of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this ComCapillaryOpsDeployerBoApplication.


        :param webhook_id: The webhook_id of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._webhook_id = webhook_id

    @property
    def deployment_strategy(self):
        """Gets the deployment_strategy of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The deployment_strategy of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._deployment_strategy

    @deployment_strategy.setter
    def deployment_strategy(self, deployment_strategy):
        """Sets the deployment_strategy of this ComCapillaryOpsDeployerBoApplication.


        :param deployment_strategy: The deployment_strategy of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        allowed_values = ["Recreate", "RollingUpdate"]  # noqa: E501
        if deployment_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_strategy, allowed_values)
            )

        self._deployment_strategy = deployment_strategy

    @property
    def elb_idle_timeout_seconds(self):
        """Gets the elb_idle_timeout_seconds of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The elb_idle_timeout_seconds of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: int
        """
        return self._elb_idle_timeout_seconds

    @elb_idle_timeout_seconds.setter
    def elb_idle_timeout_seconds(self, elb_idle_timeout_seconds):
        """Sets the elb_idle_timeout_seconds of this ComCapillaryOpsDeployerBoApplication.


        :param elb_idle_timeout_seconds: The elb_idle_timeout_seconds of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: int
        """

        self._elb_idle_timeout_seconds = elb_idle_timeout_seconds

    @property
    def strict_git_flow_mode_enabled(self):
        """Gets the strict_git_flow_mode_enabled of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The strict_git_flow_mode_enabled of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: bool
        """
        return self._strict_git_flow_mode_enabled

    @strict_git_flow_mode_enabled.setter
    def strict_git_flow_mode_enabled(self, strict_git_flow_mode_enabled):
        """Sets the strict_git_flow_mode_enabled of this ComCapillaryOpsDeployerBoApplication.


        :param strict_git_flow_mode_enabled: The strict_git_flow_mode_enabled of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: bool
        """

        self._strict_git_flow_mode_enabled = strict_git_flow_mode_enabled

    @property
    def status_callback_url(self):
        """Gets the status_callback_url of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The status_callback_url of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._status_callback_url

    @status_callback_url.setter
    def status_callback_url(self, status_callback_url):
        """Sets the status_callback_url of this ComCapillaryOpsDeployerBoApplication.


        :param status_callback_url: The status_callback_url of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._status_callback_url = status_callback_url

    @property
    def new_relic_alert_recipients(self):
        """Gets the new_relic_alert_recipients of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The new_relic_alert_recipients of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._new_relic_alert_recipients

    @new_relic_alert_recipients.setter
    def new_relic_alert_recipients(self, new_relic_alert_recipients):
        """Sets the new_relic_alert_recipients of this ComCapillaryOpsDeployerBoApplication.


        :param new_relic_alert_recipients: The new_relic_alert_recipients of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._new_relic_alert_recipients = new_relic_alert_recipients

    @property
    def tag_build_repository_ids(self):
        """Gets the tag_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The tag_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_build_repository_ids

    @tag_build_repository_ids.setter
    def tag_build_repository_ids(self, tag_build_repository_ids):
        """Sets the tag_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.


        :param tag_build_repository_ids: The tag_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: list[str]
        """

        self._tag_build_repository_ids = tag_build_repository_ids

    @property
    def branch_build_repository_ids(self):
        """Gets the branch_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The branch_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._branch_build_repository_ids

    @branch_build_repository_ids.setter
    def branch_build_repository_ids(self, branch_build_repository_ids):
        """Sets the branch_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.


        :param branch_build_repository_ids: The branch_build_repository_ids of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: list[str]
        """

        self._branch_build_repository_ids = branch_build_repository_ids

    @property
    def resource_allocation_strategy(self):
        """Gets the resource_allocation_strategy of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The resource_allocation_strategy of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._resource_allocation_strategy

    @resource_allocation_strategy.setter
    def resource_allocation_strategy(self, resource_allocation_strategy):
        """Sets the resource_allocation_strategy of this ComCapillaryOpsDeployerBoApplication.


        :param resource_allocation_strategy: The resource_allocation_strategy of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """
        allowed_values = ["GENERAL_PURPOSE", "CPU_INTENSIVE"]  # noqa: E501
        if resource_allocation_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_allocation_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_allocation_strategy, allowed_values)
            )

        self._resource_allocation_strategy = resource_allocation_strategy

    @property
    def status_callback_urls(self):
        """Gets the status_callback_urls of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The status_callback_urls of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_callback_urls

    @status_callback_urls.setter
    def status_callback_urls(self, status_callback_urls):
        """Sets the status_callback_urls of this ComCapillaryOpsDeployerBoApplication.


        :param status_callback_urls: The status_callback_urls of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: list[str]
        """

        self._status_callback_urls = status_callback_urls

    @property
    def sonar_branch_wise_analysis_supported(self):
        """Gets the sonar_branch_wise_analysis_supported of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The sonar_branch_wise_analysis_supported of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: bool
        """
        return self._sonar_branch_wise_analysis_supported

    @sonar_branch_wise_analysis_supported.setter
    def sonar_branch_wise_analysis_supported(self, sonar_branch_wise_analysis_supported):
        """Sets the sonar_branch_wise_analysis_supported of this ComCapillaryOpsDeployerBoApplication.


        :param sonar_branch_wise_analysis_supported: The sonar_branch_wise_analysis_supported of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: bool
        """

        self._sonar_branch_wise_analysis_supported = sonar_branch_wise_analysis_supported

    @property
    def sonar_project_key(self):
        """Gets the sonar_project_key of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501


        :return: The sonar_project_key of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :rtype: str
        """
        return self._sonar_project_key

    @sonar_project_key.setter
    def sonar_project_key(self, sonar_project_key):
        """Sets the sonar_project_key of this ComCapillaryOpsDeployerBoApplication.


        :param sonar_project_key: The sonar_project_key of this ComCapillaryOpsDeployerBoApplication.  # noqa: E501
        :type: str
        """

        self._sonar_project_key = sonar_project_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsDeployerBoApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsDeployerBoApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
