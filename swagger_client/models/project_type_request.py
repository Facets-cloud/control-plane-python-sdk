# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProjectTypeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_clouds': 'list[str]',
        'base_project_name': 'str',
        'description': 'str',
        'mapped_resources': 'list[ProjectTypeMappedResource]',
        'name': 'str',
        'template_git_details': 'TemplateGitDetails',
        'use_branch': 'bool'
    }

    attribute_map = {
        'allowed_clouds': 'allowedClouds',
        'base_project_name': 'baseProjectName',
        'description': 'description',
        'mapped_resources': 'mappedResources',
        'name': 'name',
        'template_git_details': 'templateGitDetails',
        'use_branch': 'useBranch'
    }

    def __init__(self, allowed_clouds=None, base_project_name=None, description=None, mapped_resources=None, name=None, template_git_details=None, use_branch=None, _configuration=None):  # noqa: E501
        """ProjectTypeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allowed_clouds = None
        self._base_project_name = None
        self._description = None
        self._mapped_resources = None
        self._name = None
        self._template_git_details = None
        self._use_branch = None
        self.discriminator = None

        self.allowed_clouds = allowed_clouds
        if base_project_name is not None:
            self.base_project_name = base_project_name
        if description is not None:
            self.description = description
        if mapped_resources is not None:
            self.mapped_resources = mapped_resources
        self.name = name
        self.template_git_details = template_git_details
        if use_branch is not None:
            self.use_branch = use_branch

    @property
    def allowed_clouds(self):
        """Gets the allowed_clouds of this ProjectTypeRequest.  # noqa: E501

        Set of allowed clouds  # noqa: E501

        :return: The allowed_clouds of this ProjectTypeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_clouds

    @allowed_clouds.setter
    def allowed_clouds(self, allowed_clouds):
        """Sets the allowed_clouds of this ProjectTypeRequest.

        Set of allowed clouds  # noqa: E501

        :param allowed_clouds: The allowed_clouds of this ProjectTypeRequest.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and allowed_clouds is None:
            raise ValueError("Invalid value for `allowed_clouds`, must not be `None`")  # noqa: E501
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(allowed_clouds).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `allowed_clouds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_clouds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_clouds = allowed_clouds

    @property
    def base_project_name(self):
        """Gets the base_project_name of this ProjectTypeRequest.  # noqa: E501

        Base project name  # noqa: E501

        :return: The base_project_name of this ProjectTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_project_name

    @base_project_name.setter
    def base_project_name(self, base_project_name):
        """Sets the base_project_name of this ProjectTypeRequest.

        Base project name  # noqa: E501

        :param base_project_name: The base_project_name of this ProjectTypeRequest.  # noqa: E501
        :type: str
        """

        self._base_project_name = base_project_name

    @property
    def description(self):
        """Gets the description of this ProjectTypeRequest.  # noqa: E501

        Description of the project type  # noqa: E501

        :return: The description of this ProjectTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectTypeRequest.

        Description of the project type  # noqa: E501

        :param description: The description of this ProjectTypeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mapped_resources(self):
        """Gets the mapped_resources of this ProjectTypeRequest.  # noqa: E501

        Allowed modules for the project  # noqa: E501

        :return: The mapped_resources of this ProjectTypeRequest.  # noqa: E501
        :rtype: list[ProjectTypeMappedResource]
        """
        return self._mapped_resources

    @mapped_resources.setter
    def mapped_resources(self, mapped_resources):
        """Sets the mapped_resources of this ProjectTypeRequest.

        Allowed modules for the project  # noqa: E501

        :param mapped_resources: The mapped_resources of this ProjectTypeRequest.  # noqa: E501
        :type: list[ProjectTypeMappedResource]
        """

        self._mapped_resources = mapped_resources

    @property
    def name(self):
        """Gets the name of this ProjectTypeRequest.  # noqa: E501

        Name of the project type  # noqa: E501

        :return: The name of this ProjectTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTypeRequest.

        Name of the project type  # noqa: E501

        :param name: The name of this ProjectTypeRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def template_git_details(self):
        """Gets the template_git_details of this ProjectTypeRequest.  # noqa: E501

        Details of the Git template used by the project type  # noqa: E501

        :return: The template_git_details of this ProjectTypeRequest.  # noqa: E501
        :rtype: TemplateGitDetails
        """
        return self._template_git_details

    @template_git_details.setter
    def template_git_details(self, template_git_details):
        """Sets the template_git_details of this ProjectTypeRequest.

        Details of the Git template used by the project type  # noqa: E501

        :param template_git_details: The template_git_details of this ProjectTypeRequest.  # noqa: E501
        :type: TemplateGitDetails
        """
        if self._configuration.client_side_validation and template_git_details is None:
            raise ValueError("Invalid value for `template_git_details`, must not be `None`")  # noqa: E501

        self._template_git_details = template_git_details

    @property
    def use_branch(self):
        """Gets the use_branch of this ProjectTypeRequest.  # noqa: E501

        Use branch flag  # noqa: E501

        :return: The use_branch of this ProjectTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_branch

    @use_branch.setter
    def use_branch(self, use_branch):
        """Sets the use_branch of this ProjectTypeRequest.

        Use branch flag  # noqa: E501

        :param use_branch: The use_branch of this ProjectTypeRequest.  # noqa: E501
        :type: bool
        """

        self._use_branch = use_branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectTypeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTypeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectTypeRequest):
            return True

        return self.to_dict() != other.to_dict()
