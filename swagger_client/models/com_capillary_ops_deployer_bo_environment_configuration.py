# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsDeployerBoEnvironmentConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kubernetes_token': 'str',
        'node_group': 'str',
        'kubernetes_api_endpoint': 'str',
        'private_dns_configuration': 'ComCapillaryOpsDeployerBoExternalDnsConfiguration',
        'public_dns_configuration': 'ComCapillaryOpsDeployerBoExternalDnsConfiguration',
        's3_dump_aws_config': 'ComCapillaryOpsDeployerBoS3DumpAwsConfig',
        'common_configs': 'dict(str, str)',
        'common_credentials': 'dict(str, str)',
        'ssl_configs': 'ComCapillaryOpsDeployerBoSSLConfigs',
        'ecr_mirror_repo': 'str',
        'k8s_logging_configuration': 'ComCapillaryOpsDeployerBoK8sLoggingConfiguration',
        'kube2_iam_configuration': 'ComCapillaryOpsDeployerBoKube2IamConfiguration',
        'spot_termination_handling_enabled': 'bool',
        'new_relic_cluster_name': 'str',
        'metric_server_enabled': 'bool',
        'cluster_autoscaler_configuration': 'ComCapillaryOpsDeployerBoClusterAutoscalerConfiguration',
        'pre_deploy_task_enabled': 'bool',
        'jmx_side_car_enabled': 'bool',
        'resource_allocation_strategy_definition': 'dict(str, float)',
        'requests_to_limits_ratio': 'float',
        'filebeat_enabled': 'bool'
    }

    attribute_map = {
        'kubernetes_token': 'kubernetesToken',
        'node_group': 'nodeGroup',
        'kubernetes_api_endpoint': 'kubernetesApiEndpoint',
        'private_dns_configuration': 'privateDnsConfiguration',
        'public_dns_configuration': 'publicDnsConfiguration',
        's3_dump_aws_config': 's3DumpAwsConfig',
        'common_configs': 'commonConfigs',
        'common_credentials': 'commonCredentials',
        'ssl_configs': 'sslConfigs',
        'ecr_mirror_repo': 'ecrMirrorRepo',
        'k8s_logging_configuration': 'k8sLoggingConfiguration',
        'kube2_iam_configuration': 'kube2IamConfiguration',
        'spot_termination_handling_enabled': 'spotTerminationHandlingEnabled',
        'new_relic_cluster_name': 'newRelicClusterName',
        'metric_server_enabled': 'metricServerEnabled',
        'cluster_autoscaler_configuration': 'clusterAutoscalerConfiguration',
        'pre_deploy_task_enabled': 'preDeployTaskEnabled',
        'jmx_side_car_enabled': 'jmxSideCarEnabled',
        'resource_allocation_strategy_definition': 'resourceAllocationStrategyDefinition',
        'requests_to_limits_ratio': 'requestsToLimitsRatio',
        'filebeat_enabled': 'filebeatEnabled'
    }

    def __init__(self, kubernetes_token=None, node_group=None, kubernetes_api_endpoint=None, private_dns_configuration=None, public_dns_configuration=None, s3_dump_aws_config=None, common_configs=None, common_credentials=None, ssl_configs=None, ecr_mirror_repo=None, k8s_logging_configuration=None, kube2_iam_configuration=None, spot_termination_handling_enabled=None, new_relic_cluster_name=None, metric_server_enabled=None, cluster_autoscaler_configuration=None, pre_deploy_task_enabled=None, jmx_side_car_enabled=None, resource_allocation_strategy_definition=None, requests_to_limits_ratio=None, filebeat_enabled=None):  # noqa: E501
        """ComCapillaryOpsDeployerBoEnvironmentConfiguration - a model defined in Swagger"""  # noqa: E501
        self._kubernetes_token = None
        self._node_group = None
        self._kubernetes_api_endpoint = None
        self._private_dns_configuration = None
        self._public_dns_configuration = None
        self._s3_dump_aws_config = None
        self._common_configs = None
        self._common_credentials = None
        self._ssl_configs = None
        self._ecr_mirror_repo = None
        self._k8s_logging_configuration = None
        self._kube2_iam_configuration = None
        self._spot_termination_handling_enabled = None
        self._new_relic_cluster_name = None
        self._metric_server_enabled = None
        self._cluster_autoscaler_configuration = None
        self._pre_deploy_task_enabled = None
        self._jmx_side_car_enabled = None
        self._resource_allocation_strategy_definition = None
        self._requests_to_limits_ratio = None
        self._filebeat_enabled = None
        self.discriminator = None
        if kubernetes_token is not None:
            self.kubernetes_token = kubernetes_token
        if node_group is not None:
            self.node_group = node_group
        if kubernetes_api_endpoint is not None:
            self.kubernetes_api_endpoint = kubernetes_api_endpoint
        if private_dns_configuration is not None:
            self.private_dns_configuration = private_dns_configuration
        if public_dns_configuration is not None:
            self.public_dns_configuration = public_dns_configuration
        if s3_dump_aws_config is not None:
            self.s3_dump_aws_config = s3_dump_aws_config
        if common_configs is not None:
            self.common_configs = common_configs
        if common_credentials is not None:
            self.common_credentials = common_credentials
        if ssl_configs is not None:
            self.ssl_configs = ssl_configs
        if ecr_mirror_repo is not None:
            self.ecr_mirror_repo = ecr_mirror_repo
        if k8s_logging_configuration is not None:
            self.k8s_logging_configuration = k8s_logging_configuration
        if kube2_iam_configuration is not None:
            self.kube2_iam_configuration = kube2_iam_configuration
        if spot_termination_handling_enabled is not None:
            self.spot_termination_handling_enabled = spot_termination_handling_enabled
        if new_relic_cluster_name is not None:
            self.new_relic_cluster_name = new_relic_cluster_name
        if metric_server_enabled is not None:
            self.metric_server_enabled = metric_server_enabled
        if cluster_autoscaler_configuration is not None:
            self.cluster_autoscaler_configuration = cluster_autoscaler_configuration
        if pre_deploy_task_enabled is not None:
            self.pre_deploy_task_enabled = pre_deploy_task_enabled
        if jmx_side_car_enabled is not None:
            self.jmx_side_car_enabled = jmx_side_car_enabled
        if resource_allocation_strategy_definition is not None:
            self.resource_allocation_strategy_definition = resource_allocation_strategy_definition
        if requests_to_limits_ratio is not None:
            self.requests_to_limits_ratio = requests_to_limits_ratio
        if filebeat_enabled is not None:
            self.filebeat_enabled = filebeat_enabled

    @property
    def kubernetes_token(self):
        """Gets the kubernetes_token of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The kubernetes_token of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_token

    @kubernetes_token.setter
    def kubernetes_token(self, kubernetes_token):
        """Sets the kubernetes_token of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param kubernetes_token: The kubernetes_token of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: str
        """

        self._kubernetes_token = kubernetes_token

    @property
    def node_group(self):
        """Gets the node_group of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The node_group of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._node_group

    @node_group.setter
    def node_group(self, node_group):
        """Sets the node_group of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param node_group: The node_group of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: str
        """

        self._node_group = node_group

    @property
    def kubernetes_api_endpoint(self):
        """Gets the kubernetes_api_endpoint of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The kubernetes_api_endpoint of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_api_endpoint

    @kubernetes_api_endpoint.setter
    def kubernetes_api_endpoint(self, kubernetes_api_endpoint):
        """Sets the kubernetes_api_endpoint of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param kubernetes_api_endpoint: The kubernetes_api_endpoint of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: str
        """

        self._kubernetes_api_endpoint = kubernetes_api_endpoint

    @property
    def private_dns_configuration(self):
        """Gets the private_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The private_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoExternalDnsConfiguration
        """
        return self._private_dns_configuration

    @private_dns_configuration.setter
    def private_dns_configuration(self, private_dns_configuration):
        """Sets the private_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param private_dns_configuration: The private_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoExternalDnsConfiguration
        """

        self._private_dns_configuration = private_dns_configuration

    @property
    def public_dns_configuration(self):
        """Gets the public_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The public_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoExternalDnsConfiguration
        """
        return self._public_dns_configuration

    @public_dns_configuration.setter
    def public_dns_configuration(self, public_dns_configuration):
        """Sets the public_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param public_dns_configuration: The public_dns_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoExternalDnsConfiguration
        """

        self._public_dns_configuration = public_dns_configuration

    @property
    def s3_dump_aws_config(self):
        """Gets the s3_dump_aws_config of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The s3_dump_aws_config of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoS3DumpAwsConfig
        """
        return self._s3_dump_aws_config

    @s3_dump_aws_config.setter
    def s3_dump_aws_config(self, s3_dump_aws_config):
        """Sets the s3_dump_aws_config of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param s3_dump_aws_config: The s3_dump_aws_config of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoS3DumpAwsConfig
        """

        self._s3_dump_aws_config = s3_dump_aws_config

    @property
    def common_configs(self):
        """Gets the common_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The common_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._common_configs

    @common_configs.setter
    def common_configs(self, common_configs):
        """Sets the common_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param common_configs: The common_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._common_configs = common_configs

    @property
    def common_credentials(self):
        """Gets the common_credentials of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The common_credentials of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._common_credentials

    @common_credentials.setter
    def common_credentials(self, common_credentials):
        """Sets the common_credentials of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param common_credentials: The common_credentials of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._common_credentials = common_credentials

    @property
    def ssl_configs(self):
        """Gets the ssl_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The ssl_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoSSLConfigs
        """
        return self._ssl_configs

    @ssl_configs.setter
    def ssl_configs(self, ssl_configs):
        """Sets the ssl_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param ssl_configs: The ssl_configs of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoSSLConfigs
        """

        self._ssl_configs = ssl_configs

    @property
    def ecr_mirror_repo(self):
        """Gets the ecr_mirror_repo of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The ecr_mirror_repo of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ecr_mirror_repo

    @ecr_mirror_repo.setter
    def ecr_mirror_repo(self, ecr_mirror_repo):
        """Sets the ecr_mirror_repo of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param ecr_mirror_repo: The ecr_mirror_repo of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: str
        """

        self._ecr_mirror_repo = ecr_mirror_repo

    @property
    def k8s_logging_configuration(self):
        """Gets the k8s_logging_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The k8s_logging_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoK8sLoggingConfiguration
        """
        return self._k8s_logging_configuration

    @k8s_logging_configuration.setter
    def k8s_logging_configuration(self, k8s_logging_configuration):
        """Sets the k8s_logging_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param k8s_logging_configuration: The k8s_logging_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoK8sLoggingConfiguration
        """

        self._k8s_logging_configuration = k8s_logging_configuration

    @property
    def kube2_iam_configuration(self):
        """Gets the kube2_iam_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The kube2_iam_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoKube2IamConfiguration
        """
        return self._kube2_iam_configuration

    @kube2_iam_configuration.setter
    def kube2_iam_configuration(self, kube2_iam_configuration):
        """Sets the kube2_iam_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param kube2_iam_configuration: The kube2_iam_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoKube2IamConfiguration
        """

        self._kube2_iam_configuration = kube2_iam_configuration

    @property
    def spot_termination_handling_enabled(self):
        """Gets the spot_termination_handling_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The spot_termination_handling_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._spot_termination_handling_enabled

    @spot_termination_handling_enabled.setter
    def spot_termination_handling_enabled(self, spot_termination_handling_enabled):
        """Sets the spot_termination_handling_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param spot_termination_handling_enabled: The spot_termination_handling_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: bool
        """

        self._spot_termination_handling_enabled = spot_termination_handling_enabled

    @property
    def new_relic_cluster_name(self):
        """Gets the new_relic_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The new_relic_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._new_relic_cluster_name

    @new_relic_cluster_name.setter
    def new_relic_cluster_name(self, new_relic_cluster_name):
        """Sets the new_relic_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param new_relic_cluster_name: The new_relic_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: str
        """

        self._new_relic_cluster_name = new_relic_cluster_name

    @property
    def metric_server_enabled(self):
        """Gets the metric_server_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The metric_server_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._metric_server_enabled

    @metric_server_enabled.setter
    def metric_server_enabled(self, metric_server_enabled):
        """Sets the metric_server_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param metric_server_enabled: The metric_server_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: bool
        """

        self._metric_server_enabled = metric_server_enabled

    @property
    def cluster_autoscaler_configuration(self):
        """Gets the cluster_autoscaler_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The cluster_autoscaler_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: ComCapillaryOpsDeployerBoClusterAutoscalerConfiguration
        """
        return self._cluster_autoscaler_configuration

    @cluster_autoscaler_configuration.setter
    def cluster_autoscaler_configuration(self, cluster_autoscaler_configuration):
        """Sets the cluster_autoscaler_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param cluster_autoscaler_configuration: The cluster_autoscaler_configuration of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: ComCapillaryOpsDeployerBoClusterAutoscalerConfiguration
        """

        self._cluster_autoscaler_configuration = cluster_autoscaler_configuration

    @property
    def pre_deploy_task_enabled(self):
        """Gets the pre_deploy_task_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The pre_deploy_task_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._pre_deploy_task_enabled

    @pre_deploy_task_enabled.setter
    def pre_deploy_task_enabled(self, pre_deploy_task_enabled):
        """Sets the pre_deploy_task_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param pre_deploy_task_enabled: The pre_deploy_task_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: bool
        """

        self._pre_deploy_task_enabled = pre_deploy_task_enabled

    @property
    def jmx_side_car_enabled(self):
        """Gets the jmx_side_car_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The jmx_side_car_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._jmx_side_car_enabled

    @jmx_side_car_enabled.setter
    def jmx_side_car_enabled(self, jmx_side_car_enabled):
        """Sets the jmx_side_car_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param jmx_side_car_enabled: The jmx_side_car_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: bool
        """

        self._jmx_side_car_enabled = jmx_side_car_enabled

    @property
    def resource_allocation_strategy_definition(self):
        """Gets the resource_allocation_strategy_definition of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The resource_allocation_strategy_definition of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._resource_allocation_strategy_definition

    @resource_allocation_strategy_definition.setter
    def resource_allocation_strategy_definition(self, resource_allocation_strategy_definition):
        """Sets the resource_allocation_strategy_definition of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param resource_allocation_strategy_definition: The resource_allocation_strategy_definition of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: dict(str, float)
        """

        self._resource_allocation_strategy_definition = resource_allocation_strategy_definition

    @property
    def requests_to_limits_ratio(self):
        """Gets the requests_to_limits_ratio of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The requests_to_limits_ratio of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._requests_to_limits_ratio

    @requests_to_limits_ratio.setter
    def requests_to_limits_ratio(self, requests_to_limits_ratio):
        """Sets the requests_to_limits_ratio of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param requests_to_limits_ratio: The requests_to_limits_ratio of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: float
        """

        self._requests_to_limits_ratio = requests_to_limits_ratio

    @property
    def filebeat_enabled(self):
        """Gets the filebeat_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501


        :return: The filebeat_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._filebeat_enabled

    @filebeat_enabled.setter
    def filebeat_enabled(self, filebeat_enabled):
        """Sets the filebeat_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.


        :param filebeat_enabled: The filebeat_enabled of this ComCapillaryOpsDeployerBoEnvironmentConfiguration.  # noqa: E501
        :type: bool
        """

        self._filebeat_enabled = filebeat_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsDeployerBoEnvironmentConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsDeployerBoEnvironmentConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
