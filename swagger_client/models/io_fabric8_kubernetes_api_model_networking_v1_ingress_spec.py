# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IoFabric8KubernetesApiModelNetworkingV1IngressSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_backend': 'IoFabric8KubernetesApiModelNetworkingV1IngressBackend',
        'ingress_class_name': 'str',
        'rules': 'list[IoFabric8KubernetesApiModelNetworkingV1IngressRule]',
        'tls': 'list[IoFabric8KubernetesApiModelNetworkingV1IngressTLS]'
    }

    attribute_map = {
        'default_backend': 'defaultBackend',
        'ingress_class_name': 'ingressClassName',
        'rules': 'rules',
        'tls': 'tls'
    }

    def __init__(self, default_backend=None, ingress_class_name=None, rules=None, tls=None):  # noqa: E501
        """IoFabric8KubernetesApiModelNetworkingV1IngressSpec - a model defined in Swagger"""  # noqa: E501
        self._default_backend = None
        self._ingress_class_name = None
        self._rules = None
        self._tls = None
        self.discriminator = None
        if default_backend is not None:
            self.default_backend = default_backend
        if ingress_class_name is not None:
            self.ingress_class_name = ingress_class_name
        if rules is not None:
            self.rules = rules
        if tls is not None:
            self.tls = tls

    @property
    def default_backend(self):
        """Gets the default_backend of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501


        :return: The default_backend of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :rtype: IoFabric8KubernetesApiModelNetworkingV1IngressBackend
        """
        return self._default_backend

    @default_backend.setter
    def default_backend(self, default_backend):
        """Sets the default_backend of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.


        :param default_backend: The default_backend of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :type: IoFabric8KubernetesApiModelNetworkingV1IngressBackend
        """

        self._default_backend = default_backend

    @property
    def ingress_class_name(self):
        """Gets the ingress_class_name of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501


        :return: The ingress_class_name of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :rtype: str
        """
        return self._ingress_class_name

    @ingress_class_name.setter
    def ingress_class_name(self, ingress_class_name):
        """Sets the ingress_class_name of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.


        :param ingress_class_name: The ingress_class_name of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :type: str
        """

        self._ingress_class_name = ingress_class_name

    @property
    def rules(self):
        """Gets the rules of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501


        :return: The rules of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :rtype: list[IoFabric8KubernetesApiModelNetworkingV1IngressRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.


        :param rules: The rules of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :type: list[IoFabric8KubernetesApiModelNetworkingV1IngressRule]
        """

        self._rules = rules

    @property
    def tls(self):
        """Gets the tls of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501


        :return: The tls of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :rtype: list[IoFabric8KubernetesApiModelNetworkingV1IngressTLS]
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.


        :param tls: The tls of this IoFabric8KubernetesApiModelNetworkingV1IngressSpec.  # noqa: E501
        :type: list[IoFabric8KubernetesApiModelNetworkingV1IngressTLS]
        """

        self._tls = tls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoFabric8KubernetesApiModelNetworkingV1IngressSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoFabric8KubernetesApiModelNetworkingV1IngressSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
