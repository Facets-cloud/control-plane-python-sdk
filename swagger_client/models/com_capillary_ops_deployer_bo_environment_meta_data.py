# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComCapillaryOpsDeployerBoEnvironmentMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capillary_cloud_cluster_name': 'str',
        'environment_type': 'str',
        'name': 'str',
        'application_family': 'str',
        'cap_cloud': 'bool'
    }

    attribute_map = {
        'capillary_cloud_cluster_name': 'capillaryCloudClusterName',
        'environment_type': 'environmentType',
        'name': 'name',
        'application_family': 'applicationFamily',
        'cap_cloud': 'capCloud'
    }

    def __init__(self, capillary_cloud_cluster_name=None, environment_type=None, name=None, application_family=None, cap_cloud=None):  # noqa: E501
        """ComCapillaryOpsDeployerBoEnvironmentMetaData - a model defined in Swagger"""  # noqa: E501
        self._capillary_cloud_cluster_name = None
        self._environment_type = None
        self._name = None
        self._application_family = None
        self._cap_cloud = None
        self.discriminator = None
        if capillary_cloud_cluster_name is not None:
            self.capillary_cloud_cluster_name = capillary_cloud_cluster_name
        if environment_type is not None:
            self.environment_type = environment_type
        if name is not None:
            self.name = name
        if application_family is not None:
            self.application_family = application_family
        if cap_cloud is not None:
            self.cap_cloud = cap_cloud

    @property
    def capillary_cloud_cluster_name(self):
        """Gets the capillary_cloud_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501


        :return: The capillary_cloud_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :rtype: str
        """
        return self._capillary_cloud_cluster_name

    @capillary_cloud_cluster_name.setter
    def capillary_cloud_cluster_name(self, capillary_cloud_cluster_name):
        """Sets the capillary_cloud_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.


        :param capillary_cloud_cluster_name: The capillary_cloud_cluster_name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :type: str
        """

        self._capillary_cloud_cluster_name = capillary_cloud_cluster_name

    @property
    def environment_type(self):
        """Gets the environment_type of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501


        :return: The environment_type of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this ComCapillaryOpsDeployerBoEnvironmentMetaData.


        :param environment_type: The environment_type of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :type: str
        """
        allowed_values = ["QA", "PRODUCTION"]  # noqa: E501
        if environment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(environment_type, allowed_values)
            )

        self._environment_type = environment_type

    @property
    def name(self):
        """Gets the name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501


        :return: The name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.


        :param name: The name of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def application_family(self):
        """Gets the application_family of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501


        :return: The application_family of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this ComCapillaryOpsDeployerBoEnvironmentMetaData.


        :param application_family: The application_family of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRM", "ECOMMERCE", "INTEGRATIONS", "OPS"]  # noqa: E501
        if application_family not in allowed_values:
            raise ValueError(
                "Invalid value for `application_family` ({0}), must be one of {1}"  # noqa: E501
                .format(application_family, allowed_values)
            )

        self._application_family = application_family

    @property
    def cap_cloud(self):
        """Gets the cap_cloud of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501


        :return: The cap_cloud of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :rtype: bool
        """
        return self._cap_cloud

    @cap_cloud.setter
    def cap_cloud(self, cap_cloud):
        """Sets the cap_cloud of this ComCapillaryOpsDeployerBoEnvironmentMetaData.


        :param cap_cloud: The cap_cloud of this ComCapillaryOpsDeployerBoEnvironmentMetaData.  # noqa: E501
        :type: bool
        """

        self._cap_cloud = cap_cloud

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComCapillaryOpsDeployerBoEnvironmentMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComCapillaryOpsDeployerBoEnvironmentMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
